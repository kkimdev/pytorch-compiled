#include <ATen/TypeDefault.h>

// @generated by aten/src/ATen/gen.py

#include <ATen/DeviceGuard.h>
#include <ATen/ExpandUtils.h>
#include <ATen/Functions.h>
#include <ATen/NamedTensorUtils.h>
#include <ATen/NativeFunctions.h>
#include <c10/core/Scalar.h>
#include <c10/core/Storage.h>
#include <ATen/Tensor.h>
#include <c10/core/TensorOptions.h>
#include <ATen/DeviceGuard.h>
#include <ATen/SparseTensorUtils.h>
#include <ATen/core/op_registration/op_registration.h>

namespace at {
namespace TypeDefault {

Tensor _cast_Byte(const Tensor & self, bool non_blocking) {
    if (self.has_names()) {
        AT_ERROR(
            "_cast_Byte is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Byte(self, non_blocking);
}
Tensor _cast_Char(const Tensor & self, bool non_blocking) {
    if (self.has_names()) {
        AT_ERROR(
            "_cast_Char is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Char(self, non_blocking);
}
Tensor _cast_Double(const Tensor & self, bool non_blocking) {
    if (self.has_names()) {
        AT_ERROR(
            "_cast_Double is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Double(self, non_blocking);
}
Tensor _cast_Float(const Tensor & self, bool non_blocking) {
    if (self.has_names()) {
        AT_ERROR(
            "_cast_Float is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Float(self, non_blocking);
}
Tensor _cast_Int(const Tensor & self, bool non_blocking) {
    if (self.has_names()) {
        AT_ERROR(
            "_cast_Int is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Int(self, non_blocking);
}
Tensor _cast_Long(const Tensor & self, bool non_blocking) {
    if (self.has_names()) {
        AT_ERROR(
            "_cast_Long is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Long(self, non_blocking);
}
Tensor _cast_Short(const Tensor & self, bool non_blocking) {
    if (self.has_names()) {
        AT_ERROR(
            "_cast_Short is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Short(self, non_blocking);
}
Tensor _cast_Half(const Tensor & self, bool non_blocking) {
    if (self.has_names()) {
        AT_ERROR(
            "_cast_Half is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Half(self, non_blocking);
}
void backward(const Tensor & self, const Tensor & gradient, bool keep_graph, bool create_graph) {
    if (self.has_names() || gradient.has_names()) {
        AT_ERROR(
            "backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
 at::native::backward(self, gradient, keep_graph, create_graph);
}
void set_data(const Tensor & self, const Tensor & new_data) {
    if (self.has_names() || new_data.has_names()) {
        AT_ERROR(
            "set_data is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
 at::native::set_data(self, new_data);
}
Tensor data(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR(
            "data is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::data(self);
}
bool is_leaf(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR(
            "is_leaf is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::is_leaf(self);
}
int64_t output_nr(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::output_nr(self);
}
int64_t _version(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR(
            "_version is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_version(self);
}
Tensor & requires_grad_(Tensor & self, bool _requires_grad) {
    if (self.has_names()) {
        AT_ERROR(
            "requires_grad_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::requires_grad_(self, _requires_grad);
}
void retain_grad(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR(
            "retain_grad is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
 at::native::retain_grad(self);
}
Tensor & rename_(Tensor & self, c10::optional<DimnameList> names) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rename_(self, names);
}
Tensor rename(const Tensor & self, c10::optional<DimnameList> names) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rename(self, names);
}
Tensor align_to(const Tensor & self, DimnameList names) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::align_to(self, names);
}
Tensor align_to(const Tensor & self, DimnameList order, int64_t ellipsis_idx) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::align_to(self, order, ellipsis_idx);
}
Tensor align_as(const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::align_as(self, other);
}
std::vector<Tensor> align_tensors(TensorList tensors) {

    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::align_tensors(tensors);
}
Tensor refine_names(const Tensor & self, DimnameList names) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::refine_names(self, names);
}
Tensor unflatten(const Tensor & self, Dimname dim, IntArrayRef sizes, DimnameList names) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::unflatten(self, dim, sizes, names);
}
Tensor unflatten(const Tensor & self, int64_t dim, IntArrayRef sizes, DimnameList names) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::unflatten(self, dim, sizes, names);
}
int64_t _debug_has_internal_overlap(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR(
            "_debug_has_internal_overlap is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_debug_has_internal_overlap(self);
}
std::tuple<Tensor,Tensor> _sobol_engine_draw(const Tensor & quasi, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated, c10::optional<ScalarType> dtype) {
    if (quasi.has_names() || sobolstate.has_names()) {
        AT_ERROR(
            "_sobol_engine_draw is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(quasi));
    return at::native::_sobol_engine_draw(quasi, n, sobolstate, dimension, num_generated, dtype);
}
Tensor & _sobol_engine_ff_(Tensor & self, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated) {
    if (self.has_names() || sobolstate.has_names()) {
        AT_ERROR(
            "_sobol_engine_ff_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sobol_engine_ff_(self, n, sobolstate, dimension, num_generated);
}
Tensor & _sobol_engine_scramble_(Tensor & self, const Tensor & ltm, int64_t dimension) {
    if (self.has_names() || ltm.has_names()) {
        AT_ERROR(
            "_sobol_engine_scramble_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sobol_engine_scramble_(self, ltm, dimension);
}
Tensor & _sobol_engine_initialize_state_(Tensor & self, int64_t dimension) {
    if (self.has_names()) {
        AT_ERROR(
            "_sobol_engine_initialize_state_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sobol_engine_initialize_state_(self, dimension);
}
Tensor _reshape_from_tensor(const Tensor & self, const Tensor & shape) {
    if (self.has_names() || shape.has_names()) {
        AT_ERROR(
            "_reshape_from_tensor is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_reshape_from_tensor(self, shape);
}
Tensor _shape_as_tensor(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR(
            "_shape_as_tensor is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_shape_as_tensor(self);
}
Tensor dropout(const Tensor & input, double p, bool train) {

    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::dropout(input, p, train);
}
Tensor & dropout_(Tensor & self, double p, bool train) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::dropout_(self, p, train);
}
Tensor feature_dropout(const Tensor & input, double p, bool train) {
    if (input.has_names()) {
        AT_ERROR(
            "feature_dropout is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::feature_dropout(input, p, train);
}
Tensor & feature_dropout_(Tensor & self, double p, bool train) {
    if (self.has_names()) {
        AT_ERROR(
            "feature_dropout_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::feature_dropout_(self, p, train);
}
Tensor alpha_dropout(const Tensor & input, double p, bool train) {
    if (input.has_names()) {
        AT_ERROR(
            "alpha_dropout is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::alpha_dropout(input, p, train);
}
Tensor & alpha_dropout_(Tensor & self, double p, bool train) {
    if (self.has_names()) {
        AT_ERROR(
            "alpha_dropout_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::alpha_dropout_(self, p, train);
}
Tensor feature_alpha_dropout(const Tensor & input, double p, bool train) {
    if (input.has_names()) {
        AT_ERROR(
            "feature_alpha_dropout is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::feature_alpha_dropout(input, p, train);
}
Tensor & feature_alpha_dropout_(Tensor & self, double p, bool train) {
    if (self.has_names()) {
        AT_ERROR(
            "feature_alpha_dropout_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::feature_alpha_dropout_(self, p, train);
}
Tensor abs(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::abs(self);
}
Tensor & abs_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::abs_(self);
}
Tensor & abs_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::abs_out(out, self);
}
Tensor angle(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::angle(self);
}
Tensor & angle_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::angle_out(out, self);
}
Tensor real(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::real(self);
}
Tensor & real_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::real_out(out, self);
}
Tensor imag(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::imag(self);
}
Tensor & imag_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::imag_out(out, self);
}
Tensor conj(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::conj(self);
}
Tensor & conj_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::conj_out(out, self);
}
Tensor acos(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::acos(self);
}
Tensor & acos_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::acos_(self);
}
Tensor & acos_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::acos_out(out, self);
}
Tensor avg_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) {
    if (self.has_names()) {
        AT_ERROR(
            "avg_pool1d is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::avg_pool1d(self, kernel_size, stride, padding, ceil_mode, count_include_pad);
}
Tensor adaptive_avg_pool1d(const Tensor & self, IntArrayRef output_size) {
    if (self.has_names()) {
        AT_ERROR(
            "adaptive_avg_pool1d is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool1d(self, output_size);
}
std::tuple<Tensor,Tensor> adaptive_max_pool1d(const Tensor & self, IntArrayRef output_size) {
    if (self.has_names()) {
        AT_ERROR(
            "adaptive_max_pool1d is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool1d(self, output_size);
}
Tensor add(const Tensor & self, Scalar other, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add(self, other, alpha);
}
Tensor & add_(Tensor & self, Scalar other, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add_(self, other, alpha);
}
Tensor addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
    if (self.has_names() || vec1.has_names() || vec2.has_names()) {
        AT_ERROR(
            "addr is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addr(self, vec1, vec2, beta, alpha);
}
Tensor & addr_(Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
    if (self.has_names() || vec1.has_names() || vec2.has_names()) {
        AT_ERROR(
            "addr_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addr_(self, vec1, vec2, beta, alpha);
}
Tensor & addr_out(Tensor & out, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
    if (out.has_names() || self.has_names() || vec1.has_names() || vec2.has_names()) {
        AT_ERROR(
            "addr_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addr_out(out, self, vec1, vec2, beta, alpha);
}
Tensor affine_grid_generator(const Tensor & theta, IntArrayRef size, bool align_corners) {
    if (theta.has_names()) {
        AT_ERROR(
            "affine_grid_generator is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(theta));
    return at::native::affine_grid_generator(theta, size, align_corners);
}
Tensor affine_grid_generator_backward(const Tensor & grad, IntArrayRef size, bool align_corners) {
    if (grad.has_names()) {
        AT_ERROR(
            "affine_grid_generator_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::affine_grid_generator_backward(grad, size, align_corners);
}
Tensor all(const Tensor & self, int64_t dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR(
            "all is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::all(self, dim, keepdim);
}
Tensor & all_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR(
            "all_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::all_out(out, self, dim, keepdim);
}
Tensor all(const Tensor & self, Dimname dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR(
            "all is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::all(self, dim, keepdim);
}
Tensor & all_out(Tensor & out, const Tensor & self, Dimname dim, bool keepdim) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR(
            "all_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::all_out(out, self, dim, keepdim);
}
bool allclose(const Tensor & self, const Tensor & other, double rtol, double atol, bool equal_nan) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "allclose is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::allclose(self, other, rtol, atol, equal_nan);
}
Tensor any(const Tensor & self, int64_t dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR(
            "any is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::any(self, dim, keepdim);
}
Tensor & any_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR(
            "any_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::any_out(out, self, dim, keepdim);
}
Tensor any(const Tensor & self, Dimname dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR(
            "any is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::any(self, dim, keepdim);
}
Tensor & any_out(Tensor & out, const Tensor & self, Dimname dim, bool keepdim) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR(
            "any_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::any_out(out, self, dim, keepdim);
}
Tensor arange(Scalar end, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::arange(end, options);
}
Tensor arange(Scalar start, Scalar end, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::arange(start, end, options);
}
Tensor arange(Scalar start, Scalar end, Scalar step, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::arange(start, end, step, options);
}
Tensor & arange_out(Tensor & out, Scalar end) {
    if (out.has_names()) {
        AT_ERROR(
            "arange_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::arange_out(out, end);
}
Tensor _dim_arange(const Tensor & like, int64_t dim) {
    if (like.has_names()) {
        AT_ERROR(
            "_dim_arange is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(like));
    return at::native::_dim_arange(like, dim);
}
Tensor & as_strided_(Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) {
    if (self.has_names()) {
        AT_ERROR(
            "as_strided_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    // DeviceGuard omitted
    return at::native::as_strided_(self, size, stride, storage_offset);
}
Tensor asin(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::asin(self);
}
Tensor & asin_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::asin_(self);
}
Tensor & asin_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::asin_out(out, self);
}
Tensor atan(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::atan(self);
}
Tensor & _baddbmm_mkl_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
    if (self.has_names() || batch1.has_names() || batch2.has_names()) {
        AT_ERROR(
            "_baddbmm_mkl_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_baddbmm_mkl_(self, batch1, batch2, beta, alpha);
}
Tensor bartlett_window(int64_t window_length, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::bartlett_window(window_length, options);
}
Tensor bartlett_window(int64_t window_length, bool periodic, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::bartlett_window(window_length, periodic, options);
}
Tensor batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled) {
    if (input.has_names() || weight.has_names() || bias.has_names() || running_mean.has_names() || running_var.has_names()) {
        AT_ERROR(
            "batch_norm is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::batch_norm(input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled);
}
std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t> _batch_norm_impl_index(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled) {
    if (input.has_names() || weight.has_names() || bias.has_names() || running_mean.has_names() || running_var.has_names()) {
        AT_ERROR(
            "_batch_norm_impl_index is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_batch_norm_impl_index(input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled);
}
std::tuple<Tensor,Tensor,Tensor> _batch_norm_impl_index_backward(int64_t impl_index, const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var_transform, bool train, double eps, std::array<bool,3> output_mask, const Tensor & reservedSpace) {
    if (input.has_names() || grad_output.has_names() || weight.has_names() || running_mean.has_names() || running_var.has_names() || save_mean.has_names() || save_var_transform.has_names() || reservedSpace.has_names()) {
        AT_ERROR(
            "_batch_norm_impl_index_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_batch_norm_impl_index_backward(impl_index, input, grad_output, weight, running_mean, running_var, save_mean, save_var_transform, train, eps, output_mask, reservedSpace);
}
Tensor bernoulli(const Tensor & self, Generator * generator) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bernoulli(self, generator);
}
Tensor & bernoulli_out(Tensor & out, const Tensor & self, Generator * generator) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bernoulli_out(out, self, generator);
}
Tensor bernoulli(const Tensor & self, double p, Generator * generator) {
    if (self.has_names()) {
        AT_ERROR(
            "bernoulli is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bernoulli(self, p, generator);
}
Tensor bilinear(const Tensor & input1, const Tensor & input2, const Tensor & weight, const Tensor & bias) {
    if (input1.has_names() || input2.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR(
            "bilinear is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input1));
    return at::native::bilinear(input1, input2, weight, bias);
}
Tensor binary_cross_entropy_with_logits(const Tensor & self, const Tensor & target, const Tensor & weight, const Tensor & pos_weight, int64_t reduction) {
    if (self.has_names() || target.has_names() || weight.has_names() || pos_weight.has_names()) {
        AT_ERROR(
            "binary_cross_entropy_with_logits is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::binary_cross_entropy_with_logits(self, target, weight, pos_weight, reduction);
}
Tensor binary_cross_entropy_with_logits_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, const Tensor & pos_weight, int64_t reduction) {
    if (grad_output.has_names() || self.has_names() || target.has_names() || weight.has_names() || pos_weight.has_names()) {
        AT_ERROR(
            "binary_cross_entropy_with_logits_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::binary_cross_entropy_with_logits_backward(grad_output, self, target, weight, pos_weight, reduction);
}
Tensor bitwise_not(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_not(self);
}
Tensor & bitwise_not_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_not_(self);
}
Tensor logical_not(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_not(self);
}
Tensor & logical_not_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_not_(self);
}
Tensor logical_xor(const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_xor(self, other);
}
Tensor & logical_xor_(Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_xor_(self, other);
}
Tensor logical_and(const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_and(self, other);
}
Tensor & logical_and_(Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_and_(self, other);
}
Tensor logical_or(const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_or(self, other);
}
Tensor & logical_or_(Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_or_(self, other);
}
Tensor blackman_window(int64_t window_length, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::blackman_window(window_length, options);
}
Tensor blackman_window(int64_t window_length, bool periodic, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::blackman_window(window_length, periodic, options);
}
std::vector<Tensor> broadcast_tensors(TensorList tensors) {
    if (at::has_names(tensors)) {
        AT_ERROR(
            "broadcast_tensors is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    // DeviceGuard omitted
    return at::native::broadcast_tensors(tensors);
}
Tensor cat(TensorList tensors, int64_t dim) {

    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::cat(tensors, dim);
}
Tensor & cat_out(Tensor & out, TensorList tensors, int64_t dim) {

    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::cat_out(out, tensors, dim);
}
Tensor cat(TensorList tensors, Dimname dim) {

    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::cat(tensors, dim);
}
Tensor & cat_out(Tensor & out, TensorList tensors, Dimname dim) {

    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::cat_out(out, tensors, dim);
}
Tensor ceil(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ceil(self);
}
Tensor & ceil_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ceil_(self);
}
Tensor chain_matmul(TensorList matrices) {
    if (at::has_names(matrices)) {
        AT_ERROR(
            "chain_matmul is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(matrices));
    return at::native::chain_matmul(matrices);
}
std::vector<Tensor> chunk(const Tensor & self, int64_t chunks, int64_t dim) {

    // DeviceGuard omitted
    return at::native::chunk(self, chunks, dim);
}
Tensor clamp_max(const Tensor & self, Scalar max) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::clamp_max(self, max);
}
Tensor clamp_min(const Tensor & self, Scalar min) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::clamp_min(self, min);
}
bool cudnn_is_acceptable(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR(
            "cudnn_is_acceptable is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    // DeviceGuard omitted
    return at::native::cudnn_is_acceptable(self);
}
Tensor constant_pad_nd(const Tensor & self, IntArrayRef pad, Scalar value) {
    if (self.has_names()) {
        AT_ERROR(
            "constant_pad_nd is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::constant_pad_nd(self, pad, value);
}
Tensor contiguous(const Tensor & self, MemoryFormat memory_format) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::contiguous(self, memory_format);
}
Tensor convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR(
            "convolution is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::convolution(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups);
}
Tensor convolution_overrideable(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR(
            "convolution_overrideable is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::convolution_overrideable(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups);
}
std::tuple<Tensor,Tensor,Tensor> convolution_backward_overrideable(const Tensor & grad_output, const Tensor & input, const Tensor & weight, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, std::array<bool,3> output_mask) {
    if (grad_output.has_names() || input.has_names() || weight.has_names()) {
        AT_ERROR(
            "convolution_backward_overrideable is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::convolution_backward_overrideable(grad_output, input, weight, stride, padding, dilation, transposed, output_padding, groups, output_mask);
}
Tensor _convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR(
            "_convolution is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_convolution(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled);
}
Tensor _convolution_nogroup(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR(
            "_convolution_nogroup is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_convolution_nogroup(input, weight, bias, stride, padding, dilation, transposed, output_padding);
}
std::tuple<Tensor,Tensor,Tensor> _convolution_double_backward(const Tensor & ggI, const Tensor & ggW, const Tensor & ggb, const Tensor & gO, const Tensor & weight, const Tensor & self, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, std::array<bool,3> output_mask) {
    if (ggI.has_names() || ggW.has_names() || ggb.has_names() || gO.has_names() || weight.has_names() || self.has_names()) {
        AT_ERROR(
            "_convolution_double_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_convolution_double_backward(ggI, ggW, ggb, gO, weight, self, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled, output_mask);
}
Tensor conv1d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR(
            "conv1d is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv1d(input, weight, bias, stride, padding, dilation, groups);
}
Tensor conv2d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR(
            "conv2d is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv2d(input, weight, bias, stride, padding, dilation, groups);
}
Tensor conv3d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR(
            "conv3d is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv3d(input, weight, bias, stride, padding, dilation, groups);
}
Tensor conv_tbc(const Tensor & self, const Tensor & weight, const Tensor & bias, int64_t pad) {
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR(
            "conv_tbc is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::conv_tbc(self, weight, bias, pad);
}
std::tuple<Tensor,Tensor,Tensor> conv_tbc_backward(const Tensor & self, const Tensor & input, const Tensor & weight, const Tensor & bias, int64_t pad) {
    if (self.has_names() || input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR(
            "conv_tbc_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::conv_tbc_backward(self, input, weight, bias, pad);
}
Tensor conv_transpose1d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR(
            "conv_transpose1d is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv_transpose1d(input, weight, bias, stride, padding, output_padding, groups, dilation);
}
Tensor conv_transpose2d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR(
            "conv_transpose2d is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv_transpose2d(input, weight, bias, stride, padding, output_padding, groups, dilation);
}
Tensor conv_transpose3d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR(
            "conv_transpose3d is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv_transpose3d(input, weight, bias, stride, padding, output_padding, groups, dilation);
}
Tensor & copy_(Tensor & self, const Tensor & src, bool non_blocking) {

    // DeviceGuard omitted
    return at::native::copy_(self, src, non_blocking);
}
Tensor cos(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cos(self);
}
Tensor cosh(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cosh(self);
}
Tensor cosine_embedding_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin, int64_t reduction) {
    if (input1.has_names() || input2.has_names() || target.has_names()) {
        AT_ERROR(
            "cosine_embedding_loss is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input1));
    return at::native::cosine_embedding_loss(input1, input2, target, margin, reduction);
}
std::tuple<Tensor,Tensor> cummax(const Tensor & self, int64_t dim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cummax(self, dim);
}
std::tuple<Tensor &,Tensor &> cummax_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cummax_out(values, indices, self, dim);
}
std::tuple<Tensor,Tensor> cummax(const Tensor & self, Dimname dim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cummax(self, dim);
}
std::tuple<Tensor &,Tensor &> cummax_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cummax_out(values, indices, self, dim);
}
std::tuple<Tensor,Tensor> cummin(const Tensor & self, int64_t dim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cummin(self, dim);
}
std::tuple<Tensor &,Tensor &> cummin_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cummin_out(values, indices, self, dim);
}
std::tuple<Tensor,Tensor> cummin(const Tensor & self, Dimname dim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cummin(self, dim);
}
std::tuple<Tensor &,Tensor &> cummin_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cummin_out(values, indices, self, dim);
}
Tensor cumprod(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumprod(self, dim, dtype);
}
Tensor & cumprod_out(Tensor & out, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumprod_out(out, self, dim, dtype);
}
Tensor cumprod(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumprod(self, dim, dtype);
}
Tensor & cumprod_out(Tensor & out, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumprod_out(out, self, dim, dtype);
}
Tensor cumsum(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumsum(self, dim, dtype);
}
Tensor & cumsum_out(Tensor & out, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumsum_out(out, self, dim, dtype);
}
Tensor cumsum(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumsum(self, dim, dtype);
}
Tensor & cumsum_out(Tensor & out, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumsum_out(out, self, dim, dtype);
}
Tensor ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, int64_t reduction, bool zero_infinity) {
    if (log_probs.has_names() || targets.has_names()) {
        AT_ERROR(
            "ctc_loss is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(log_probs));
    return at::native::ctc_loss(log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity);
}
Tensor ctc_loss(const Tensor & log_probs, const Tensor & targets, const Tensor & input_lengths, const Tensor & target_lengths, int64_t blank, int64_t reduction, bool zero_infinity) {
    if (log_probs.has_names() || targets.has_names() || input_lengths.has_names() || target_lengths.has_names()) {
        AT_ERROR(
            "ctc_loss is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(log_probs));
    return at::native::ctc_loss(log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity);
}
Tensor det(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR(
            "det is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::det(self);
}
Tensor diag_embed(const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) {
    if (self.has_names()) {
        AT_ERROR(
            "diag_embed is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::diag_embed(self, offset, dim1, dim2);
}
Tensor diagflat(const Tensor & self, int64_t offset) {
    if (self.has_names()) {
        AT_ERROR(
            "diagflat is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::diagflat(self, offset);
}
Tensor diagonal(const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::diagonal(self, offset, dim1, dim2);
}
Tensor diagonal(const Tensor & self, Dimname outdim, Dimname dim1, Dimname dim2, int64_t offset) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::diagonal(self, outdim, dim1, dim2, offset);
}
Tensor & fill_diagonal_(Tensor & self, Scalar fill_value, bool wrap) {
    if (self.has_names()) {
        AT_ERROR(
            "fill_diagonal_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fill_diagonal_(self, fill_value, wrap);
}
Tensor div(const Tensor & self, Scalar other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::div(self, other);
}
Tensor & div_(Tensor & self, Scalar other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::div_(self, other);
}
Tensor & dot_out(Tensor & out, const Tensor & self, const Tensor & tensor) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::dot_out(out, self, tensor);
}
Tensor einsum(std::string equation, TensorList tensors) {
    if (at::has_names(tensors)) {
        AT_ERROR(
            "einsum is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::einsum(equation, tensors);
}
Tensor embedding(const Tensor & weight, const Tensor & indices, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) {
    if (weight.has_names() || indices.has_names()) {
        AT_ERROR(
            "embedding is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(weight));
    return at::native::embedding(weight, indices, padding_idx, scale_grad_by_freq, sparse);
}
Tensor embedding_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) {
    if (grad.has_names() || indices.has_names()) {
        AT_ERROR(
            "embedding_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::embedding_backward(grad, indices, num_weights, padding_idx, scale_grad_by_freq, sparse);
}
Tensor embedding_sparse_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) {
    if (grad.has_names() || indices.has_names()) {
        AT_ERROR(
            "embedding_sparse_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::embedding_sparse_backward(grad, indices, num_weights, padding_idx, scale_grad_by_freq);
}
std::tuple<Tensor,Tensor,Tensor,Tensor> embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights, bool include_last_offset) {
    if (weight.has_names() || indices.has_names() || offsets.has_names() || per_sample_weights.has_names()) {
        AT_ERROR(
            "embedding_bag is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(weight));
    return at::native::embedding_bag(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset);
}
Tensor _embedding_bag_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights) {
    if (grad.has_names() || indices.has_names() || offsets.has_names() || offset2bag.has_names() || bag_size.has_names() || maximum_indices.has_names() || per_sample_weights.has_names()) {
        AT_ERROR(
            "_embedding_bag_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::_embedding_bag_backward(grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, sparse, per_sample_weights);
}
Tensor _embedding_bag_sparse_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const Tensor & per_sample_weights) {
    if (grad.has_names() || indices.has_names() || offsets.has_names() || offset2bag.has_names() || bag_size.has_names() || per_sample_weights.has_names()) {
        AT_ERROR(
            "_embedding_bag_sparse_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::_embedding_bag_sparse_backward(grad, indices, offsets, offset2bag, bag_size, num_weights, scale_grad_by_freq, mode, per_sample_weights);
}
Tensor empty(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {

    // DeviceGuard omitted
    return at::native::empty(size, names, options, memory_format);
}
Tensor new_empty(const Tensor & self, IntArrayRef size, const TensorOptions & options) {
    if (self.has_names()) {
        AT_ERROR(
            "new_empty is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const DeviceGuard device_guard(options.device());
    return at::native::new_empty(self, size, options);
}
Tensor new_full(const Tensor & self, IntArrayRef size, Scalar fill_value, const TensorOptions & options) {
    if (self.has_names()) {
        AT_ERROR(
            "new_full is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const DeviceGuard device_guard(options.device());
    return at::native::new_full(self, size, fill_value, options);
}
Tensor new_zeros(const Tensor & self, IntArrayRef size, const TensorOptions & options) {
    if (self.has_names()) {
        AT_ERROR(
            "new_zeros is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const DeviceGuard device_guard(options.device());
    return at::native::new_zeros(self, size, options);
}
Tensor & resize_(Tensor & self, IntArrayRef size, c10::optional<MemoryFormat> memory_format) {

    // DeviceGuard omitted
    return at::native::resize_(self, size, memory_format);
}
Tensor & empty_out(Tensor & out, IntArrayRef size, c10::optional<MemoryFormat> memory_format) {
    if (out.has_names()) {
        AT_ERROR(
            "empty_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    // DeviceGuard omitted
    return at::native::empty_out(out, size, memory_format);
}
Tensor empty_like(const Tensor & self, c10::optional<MemoryFormat> memory_format) {

    // DeviceGuard omitted
    return at::native::empty_like(self, memory_format);
}
Tensor empty_like(const Tensor & self, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {

    // DeviceGuard omitted
    return at::native::empty_like(self, options, memory_format);
}
Tensor erf(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::erf(self);
}
Tensor erfc(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::erfc(self);
}
Tensor exp(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::exp(self);
}
Tensor expm1(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::expm1(self);
}
Tensor & expm1_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::expm1_(self);
}
Tensor expand(const Tensor & self, IntArrayRef size, bool implicit) {

    // DeviceGuard omitted
    return at::native::expand(self, size, implicit);
}
Tensor expand_as(const Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "expand_as is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    // DeviceGuard omitted
    return at::native::expand_as(self, other);
}
Tensor eye(int64_t n, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::eye(n, options);
}
Tensor eye(int64_t n, int64_t m, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::eye(n, m, options);
}
Tensor flatten(const Tensor & self, int64_t start_dim, int64_t end_dim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::flatten(self, start_dim, end_dim);
}
Tensor flatten(const Tensor & self, int64_t start_dim, int64_t end_dim, Dimname out_dim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::flatten(self, start_dim, end_dim, out_dim);
}
Tensor flatten(const Tensor & self, Dimname start_dim, Dimname end_dim, Dimname out_dim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::flatten(self, start_dim, end_dim, out_dim);
}
Tensor flatten(const Tensor & self, DimnameList dims, Dimname out_dim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::flatten(self, dims, out_dim);
}
Tensor & fill_(Tensor & self, Scalar value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fill_(self, value);
}
Tensor & fill_(Tensor & self, const Tensor & value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fill_(self, value);
}
Tensor floor(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::floor(self);
}
Tensor & floor_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::floor_(self);
}
Tensor floor_divide(const Tensor & input, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::floor_divide(input, other);
}
Tensor floor_divide(const Tensor & input, Scalar other) {

    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::floor_divide(input, other);
}
Tensor frac(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::frac(self);
}
Tensor & frac_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::frac_(self);
}
Tensor & frac_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::frac_out(out, self);
}
Tensor full(IntArrayRef size, Scalar fill_value, c10::optional<DimnameList> names, const TensorOptions & options) {

    // DeviceGuard omitted
    return at::native::full(size, fill_value, names, options);
}
Tensor full(IntArrayRef size, Scalar fill_value, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::full(size, fill_value, options);
}
Tensor & full_out(Tensor & out, IntArrayRef size, Scalar fill_value) {
    if (out.has_names()) {
        AT_ERROR(
            "full_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::full_out(out, size, fill_value);
}
Tensor full_like(const Tensor & self, Scalar fill_value, c10::optional<MemoryFormat> memory_format) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::full_like(self, fill_value, memory_format);
}
Tensor full_like(const Tensor & self, Scalar fill_value, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {

    const DeviceGuard device_guard(options.device());
    return at::native::full_like(self, fill_value, options, memory_format);
}
Tensor grid_sampler(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
    if (input.has_names() || grid.has_names()) {
        AT_ERROR(
            "grid_sampler is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::grid_sampler(input, grid, interpolation_mode, padding_mode, align_corners);
}
Tensor hann_window(int64_t window_length, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::hann_window(window_length, options);
}
Tensor hann_window(int64_t window_length, bool periodic, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::hann_window(window_length, periodic, options);
}
Tensor hamming_window(int64_t window_length, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::hamming_window(window_length, options);
}
Tensor hamming_window(int64_t window_length, bool periodic, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::hamming_window(window_length, periodic, options);
}
Tensor hamming_window(int64_t window_length, bool periodic, double alpha, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::hamming_window(window_length, periodic, alpha, options);
}
Tensor hamming_window(int64_t window_length, bool periodic, double alpha, double beta, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::hamming_window(window_length, periodic, alpha, beta, options);
}
Tensor hinge_embedding_loss(const Tensor & self, const Tensor & target, double margin, int64_t reduction) {
    if (self.has_names() || target.has_names()) {
        AT_ERROR(
            "hinge_embedding_loss is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hinge_embedding_loss(self, target, margin, reduction);
}
Tensor group_norm(const Tensor & input, int64_t num_groups, const Tensor & weight, const Tensor & bias, double eps, bool cudnn_enabled) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR(
            "group_norm is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::group_norm(input, num_groups, weight, bias, eps, cudnn_enabled);
}
Tensor fft(const Tensor & self, int64_t signal_ndim, bool normalized) {
    if (self.has_names()) {
        AT_ERROR(
            "fft is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fft(self, signal_ndim, normalized);
}
Tensor ifft(const Tensor & self, int64_t signal_ndim, bool normalized) {
    if (self.has_names()) {
        AT_ERROR(
            "ifft is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ifft(self, signal_ndim, normalized);
}
Tensor rfft(const Tensor & self, int64_t signal_ndim, bool normalized, bool onesided) {
    if (self.has_names()) {
        AT_ERROR(
            "rfft is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rfft(self, signal_ndim, normalized, onesided);
}
Tensor irfft(const Tensor & self, int64_t signal_ndim, bool normalized, bool onesided, IntArrayRef signal_sizes) {
    if (self.has_names()) {
        AT_ERROR(
            "irfft is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::irfft(self, signal_ndim, normalized, onesided, signal_sizes);
}
int64_t _cufft_get_plan_cache_size(int64_t device_index) {

    // DeviceGuard omitted
    return at::native::_cufft_get_plan_cache_size(device_index);
}
int64_t _cufft_get_plan_cache_max_size(int64_t device_index) {

    // DeviceGuard omitted
    return at::native::_cufft_get_plan_cache_max_size(device_index);
}
void _cufft_set_plan_cache_max_size(int64_t device_index, int64_t max_size) {

    // DeviceGuard omitted
 at::native::_cufft_set_plan_cache_max_size(device_index, max_size);
}
void _cufft_clear_plan_cache(int64_t device_index) {

    // DeviceGuard omitted
 at::native::_cufft_clear_plan_cache(device_index);
}
Tensor index(const Tensor & self, TensorList indices) {
    if (self.has_names() || at::has_names(indices)) {
        AT_ERROR(
            "index is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index(self, indices);
}
Tensor & index_copy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
    if (self.has_names() || index.has_names() || source.has_names()) {
        AT_ERROR(
            "index_copy_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_copy_(self, dim, index, source);
}
Tensor index_copy(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
    if (self.has_names() || index.has_names() || source.has_names()) {
        AT_ERROR(
            "index_copy is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_copy(self, dim, index, source);
}
Tensor & index_copy_(Tensor & self, Dimname dim, const Tensor & index, const Tensor & source) {
    if (self.has_names() || index.has_names() || source.has_names()) {
        AT_ERROR(
            "index_copy_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_copy_(self, dim, index, source);
}
Tensor index_copy(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & source) {
    if (self.has_names() || index.has_names() || source.has_names()) {
        AT_ERROR(
            "index_copy is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_copy(self, dim, index, source);
}
Tensor & index_put_(Tensor & self, TensorList indices, const Tensor & values, bool accumulate) {
    if (self.has_names() || values.has_names() || at::has_names(indices)) {
        AT_ERROR(
            "index_put_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_put_(self, indices, values, accumulate);
}
Tensor index_put(const Tensor & self, TensorList indices, const Tensor & values, bool accumulate) {
    if (self.has_names() || values.has_names() || at::has_names(indices)) {
        AT_ERROR(
            "index_put is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_put(self, indices, values, accumulate);
}
Tensor & _index_put_impl_(Tensor & self, TensorList indices, const Tensor & values, bool accumulate, bool unsafe) {
    if (self.has_names() || values.has_names() || at::has_names(indices)) {
        AT_ERROR(
            "_index_put_impl_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_index_put_impl_(self, indices, values, accumulate, unsafe);
}
Tensor instance_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool use_input_stats, double momentum, double eps, bool cudnn_enabled) {
    if (input.has_names() || weight.has_names() || bias.has_names() || running_mean.has_names() || running_var.has_names()) {
        AT_ERROR(
            "instance_norm is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::instance_norm(input, weight, bias, running_mean, running_var, use_input_stats, momentum, eps, cudnn_enabled);
}
Tensor inverse(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR(
            "inverse is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::inverse(self);
}
Tensor & inverse_out(Tensor & out, const Tensor & self) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR(
            "inverse_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::inverse_out(out, self);
}
Tensor isclose(const Tensor & self, const Tensor & other, double rtol, double atol, bool equal_nan) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "isclose is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::isclose(self, other, rtol, atol, equal_nan);
}
bool is_distributed(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR(
            "is_distributed is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    // DeviceGuard omitted
    return at::native::is_distributed(self);
}
bool is_floating_point(const Tensor & self) {

    // DeviceGuard omitted
    return at::native::is_floating_point(self);
}
bool is_complex(const Tensor & self) {

    // DeviceGuard omitted
    return at::native::is_complex(self);
}
bool is_nonzero(const Tensor & self) {

    // DeviceGuard omitted
    return at::native::is_nonzero(self);
}
bool is_same_size(const Tensor & self, const Tensor & other) {

    // DeviceGuard omitted
    return at::native::is_same_size(self, other);
}
bool is_signed(const Tensor & self) {

    // DeviceGuard omitted
    return at::native::is_signed(self);
}
Tensor kl_div(const Tensor & self, const Tensor & target, int64_t reduction) {
    if (self.has_names() || target.has_names()) {
        AT_ERROR(
            "kl_div is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::kl_div(self, target, reduction);
}
std::tuple<Tensor,Tensor> kthvalue(const Tensor & self, int64_t k, int64_t dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::kthvalue(self, k, dim, keepdim);
}
std::tuple<Tensor,Tensor> kthvalue(const Tensor & self, int64_t k, Dimname dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::kthvalue(self, k, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> kthvalue_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, Dimname dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::kthvalue_out(values, indices, self, k, dim, keepdim);
}
Tensor layer_norm(const Tensor & input, IntArrayRef normalized_shape, const Tensor & weight, const Tensor & bias, double eps, bool cudnn_enable) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR(
            "layer_norm is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::layer_norm(input, normalized_shape, weight, bias, eps, cudnn_enable);
}
Tensor linear(const Tensor & input, const Tensor & weight, const Tensor & bias) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR(
            "linear is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::linear(input, weight, bias);
}
Tensor fbgemm_linear_int8_weight_fp32_activation(const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, Scalar weight_scale, Scalar weight_zero_point, const Tensor & bias) {
    if (input.has_names() || weight.has_names() || packed.has_names() || col_offsets.has_names() || bias.has_names()) {
        AT_ERROR(
            "fbgemm_linear_int8_weight_fp32_activation is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_linear_int8_weight_fp32_activation(input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias);
}
Tensor fbgemm_linear_int8_weight(const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, Scalar weight_scale, Scalar weight_zero_point, const Tensor & bias) {
    if (input.has_names() || weight.has_names() || packed.has_names() || col_offsets.has_names() || bias.has_names()) {
        AT_ERROR(
            "fbgemm_linear_int8_weight is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_linear_int8_weight(input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias);
}
std::tuple<Tensor,Tensor,double,int64_t> fbgemm_linear_quantize_weight(const Tensor & input) {
    if (input.has_names()) {
        AT_ERROR(
            "fbgemm_linear_quantize_weight is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_linear_quantize_weight(input);
}
Tensor fbgemm_pack_gemm_matrix_fp16(const Tensor & input) {
    if (input.has_names()) {
        AT_ERROR(
            "fbgemm_pack_gemm_matrix_fp16 is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_pack_gemm_matrix_fp16(input);
}
Tensor fbgemm_linear_fp16_weight_fp32_activation(const Tensor & input, const Tensor & packed_weight, const Tensor & bias) {
    if (input.has_names() || packed_weight.has_names() || bias.has_names()) {
        AT_ERROR(
            "fbgemm_linear_fp16_weight_fp32_activation is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_linear_fp16_weight_fp32_activation(input, packed_weight, bias);
}
Tensor fbgemm_linear_fp16_weight(const Tensor & input, const Tensor & packed_weight, const Tensor & bias) {
    if (input.has_names() || packed_weight.has_names() || bias.has_names()) {
        AT_ERROR(
            "fbgemm_linear_fp16_weight is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_linear_fp16_weight(input, packed_weight, bias);
}
Tensor fbgemm_pack_quantized_matrix(const Tensor & input) {
    if (input.has_names()) {
        AT_ERROR(
            "fbgemm_pack_quantized_matrix is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_pack_quantized_matrix(input);
}
Tensor fbgemm_pack_quantized_matrix(const Tensor & input, int64_t K, int64_t N) {
    if (input.has_names()) {
        AT_ERROR(
            "fbgemm_pack_quantized_matrix is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_pack_quantized_matrix(input, K, N);
}
Tensor linspace(Scalar start, Scalar end, int64_t steps, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::linspace(start, end, steps, options);
}
Tensor log(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log(self);
}
Tensor & log_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_(self);
}
Tensor log10(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log10(self);
}
Tensor & log10_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log10_(self);
}
Tensor log1p(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log1p(self);
}
Tensor log2(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log2(self);
}
Tensor & log2_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log2_(self);
}
Tensor logdet(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR(
            "logdet is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logdet(self);
}
Tensor logspace(Scalar start, Scalar end, int64_t steps, double base, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::logspace(start, end, steps, base, options);
}
Tensor log_softmax(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_softmax(self, dim, dtype);
}
Tensor log_softmax(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_softmax(self, dim, dtype);
}
Tensor logsumexp(const Tensor & self, IntArrayRef dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logsumexp(self, dim, keepdim);
}
Tensor & logsumexp_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logsumexp_out(out, self, dim, keepdim);
}
Tensor logsumexp(const Tensor & self, DimnameList dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logsumexp(self, dim, keepdim);
}
Tensor & logsumexp_out(Tensor & out, const Tensor & self, DimnameList dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logsumexp_out(out, self, dim, keepdim);
}
Tensor margin_ranking_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin, int64_t reduction) {
    if (input1.has_names() || input2.has_names() || target.has_names()) {
        AT_ERROR(
            "margin_ranking_loss is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input1));
    return at::native::margin_ranking_loss(input1, input2, target, margin, reduction);
}
Tensor matmul(const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::matmul(self, other);
}
Tensor & matmul_out(Tensor & out, const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::matmul_out(out, self, other);
}
Tensor matrix_rank(const Tensor & self, double tol, bool symmetric) {
    if (self.has_names()) {
        AT_ERROR(
            "matrix_rank is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::matrix_rank(self, tol, symmetric);
}
Tensor matrix_rank(const Tensor & self, bool symmetric) {
    if (self.has_names()) {
        AT_ERROR(
            "matrix_rank is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::matrix_rank(self, symmetric);
}
Tensor matrix_power(const Tensor & self, int64_t n) {
    if (self.has_names()) {
        AT_ERROR(
            "matrix_power is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::matrix_power(self, n);
}
std::tuple<Tensor,Tensor> max(const Tensor & self, int64_t dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> max_out(Tensor & max, Tensor & max_values, const Tensor & self, int64_t dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_out(max, max_values, self, dim, keepdim);
}
Tensor max_values(const Tensor & self, IntArrayRef dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR(
            "max_values is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_values(self, dim, keepdim);
}
std::tuple<Tensor,Tensor> max(const Tensor & self, Dimname dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> max_out(Tensor & max, Tensor & max_values, const Tensor & self, Dimname dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_out(max, max_values, self, dim, keepdim);
}
Tensor max_values(const Tensor & self, DimnameList dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR(
            "max_values is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_values(self, dim, keepdim);
}
std::tuple<Tensor,Tensor> max_pool1d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool1d_with_indices(self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor max_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool1d(self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool2d(self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool3d(self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor mean(const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mean(self, dim, keepdim, dtype);
}
Tensor & mean_out(Tensor & out, const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mean_out(out, self, dim, keepdim, dtype);
}
std::tuple<Tensor,Tensor> median(const Tensor & self, int64_t dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::median(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> median_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::median_out(values, indices, self, dim, keepdim);
}
std::tuple<Tensor,Tensor> median(const Tensor & self, Dimname dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::median(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> median_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::median_out(values, indices, self, dim, keepdim);
}
std::tuple<Tensor,Tensor> min(const Tensor & self, int64_t dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> min_out(Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min_out(min, min_indices, self, dim, keepdim);
}
Tensor min_values(const Tensor & self, IntArrayRef dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR(
            "min_values is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min_values(self, dim, keepdim);
}
std::tuple<Tensor,Tensor> min(const Tensor & self, Dimname dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> min_out(Tensor & min, Tensor & min_indices, const Tensor & self, Dimname dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min_out(min, min_indices, self, dim, keepdim);
}
Tensor min_values(const Tensor & self, DimnameList dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR(
            "min_values is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min_values(self, dim, keepdim);
}
Tensor mkldnn_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups) {
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR(
            "mkldnn_convolution is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mkldnn_convolution(self, weight, bias, padding, stride, dilation, groups);
}
Tensor mkldnn_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined) {
    if (grad_output.has_names() || weight.has_names()) {
        AT_ERROR(
            "mkldnn_convolution_backward_input is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::mkldnn_convolution_backward_input(self_size, grad_output, weight, padding, stride, dilation, groups, bias_defined);
}
std::tuple<Tensor,Tensor> mkldnn_convolution_backward_weights(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined) {
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR(
            "mkldnn_convolution_backward_weights is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mkldnn_convolution_backward_weights(weight_size, grad_output, self, padding, stride, dilation, groups, bias_defined);
}
std::tuple<Tensor,Tensor,Tensor> mkldnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, std::array<bool,3> output_mask) {
    if (self.has_names() || grad_output.has_names() || weight.has_names()) {
        AT_ERROR(
            "mkldnn_convolution_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mkldnn_convolution_backward(self, grad_output, weight, padding, stride, dilation, groups, output_mask);
}
Tensor _sparse_mm(const Tensor & sparse, const Tensor & dense) {
    if (sparse.has_names() || dense.has_names()) {
        AT_ERROR(
            "_sparse_mm is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(sparse));
    return at::native::_sparse_mm(sparse, dense);
}
std::tuple<Tensor,Tensor> mode(const Tensor & self, int64_t dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mode(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> mode_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mode_out(values, indices, self, dim, keepdim);
}
std::tuple<Tensor,Tensor> mode(const Tensor & self, Dimname dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mode(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> mode_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mode_out(values, indices, self, dim, keepdim);
}
Tensor mul(const Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR(
            "mul is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul(self, other);
}
Tensor & mul_(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR(
            "mul_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul_(self, other);
}
Tensor mvlgamma(const Tensor & self, int64_t p) {
    if (self.has_names()) {
        AT_ERROR(
            "mvlgamma is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mvlgamma(self, p);
}
Tensor & mvlgamma_(Tensor & self, int64_t p) {
    if (self.has_names()) {
        AT_ERROR(
            "mvlgamma_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mvlgamma_(self, p);
}
Tensor narrow(const Tensor & self, int64_t dim, int64_t start, int64_t length) {

    // DeviceGuard omitted
    return at::native::narrow(self, dim, start, length);
}
bool _nnpack_available() {

    // DeviceGuard omitted
    return at::native::_nnpack_available();
}
Tensor _nnpack_spatial_convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR(
            "_nnpack_spatial_convolution is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_nnpack_spatial_convolution(input, weight, bias, padding, stride);
}
std::tuple<Tensor,Tensor,Tensor> _nnpack_spatial_convolution_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, std::array<bool,3> output_mask) {
    if (input.has_names() || grad_output.has_names() || weight.has_names()) {
        AT_ERROR(
            "_nnpack_spatial_convolution_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_nnpack_spatial_convolution_backward(input, grad_output, weight, padding, output_mask);
}
Tensor _nnpack_spatial_convolution_backward_input(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding) {
    if (input.has_names() || grad_output.has_names() || weight.has_names()) {
        AT_ERROR(
            "_nnpack_spatial_convolution_backward_input is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_nnpack_spatial_convolution_backward_input(input, grad_output, weight, padding);
}
Tensor _nnpack_spatial_convolution_backward_weight(const Tensor & input, IntArrayRef weightsize, const Tensor & grad_output, IntArrayRef padding) {
    if (input.has_names() || grad_output.has_names()) {
        AT_ERROR(
            "_nnpack_spatial_convolution_backward_weight is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_nnpack_spatial_convolution_backward_weight(input, weightsize, grad_output, padding);
}
Tensor ones(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options) {

    // DeviceGuard omitted
    return at::native::ones(size, names, options);
}
Tensor ones(IntArrayRef size, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::ones(size, options);
}
Tensor & ones_out(Tensor & out, IntArrayRef size) {
    if (out.has_names()) {
        AT_ERROR(
            "ones_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::ones_out(out, size);
}
Tensor ones_like(const Tensor & self, c10::optional<MemoryFormat> memory_format) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ones_like(self, memory_format);
}
Tensor ones_like(const Tensor & self, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {

    const DeviceGuard device_guard(options.device());
    return at::native::ones_like(self, options, memory_format);
}
Tensor pairwise_distance(const Tensor & x1, const Tensor & x2, double p, double eps, bool keepdim) {
    if (x1.has_names() || x2.has_names()) {
        AT_ERROR(
            "pairwise_distance is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(x1));
    return at::native::pairwise_distance(x1, x2, p, eps, keepdim);
}
Tensor cdist(const Tensor & x1, const Tensor & x2, double p, c10::optional<int64_t> compute_mode) {

    const OptionalDeviceGuard device_guard(device_of(x1));
    return at::native::cdist(x1, x2, p, compute_mode);
}
Tensor _cdist_backward(const Tensor & grad, const Tensor & x1, const Tensor & x2, double p, const Tensor & cdist) {
    if (grad.has_names() || x1.has_names() || x2.has_names() || cdist.has_names()) {
        AT_ERROR(
            "_cdist_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::_cdist_backward(grad, x1, x2, p, cdist);
}
Tensor pdist(const Tensor & self, double p) {
    if (self.has_names()) {
        AT_ERROR(
            "pdist is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pdist(self, p);
}
Tensor _pdist_forward(const Tensor & self, double p) {
    if (self.has_names()) {
        AT_ERROR(
            "_pdist_forward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_pdist_forward(self, p);
}
Tensor _pdist_backward(const Tensor & grad, const Tensor & self, double p, const Tensor & pdist) {
    if (grad.has_names() || self.has_names() || pdist.has_names()) {
        AT_ERROR(
            "_pdist_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_pdist_backward(grad, self, p, pdist);
}
Tensor cosine_similarity(const Tensor & x1, const Tensor & x2, int64_t dim, double eps) {
    if (x1.has_names() || x2.has_names()) {
        AT_ERROR(
            "cosine_similarity is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(x1));
    return at::native::cosine_similarity(x1, x2, dim, eps);
}
Tensor permute(const Tensor & self, IntArrayRef dims) {
    if (self.has_names()) {
        AT_ERROR(
            "permute is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::permute(self, dims);
}
Tensor numpy_T(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR(
            "numpy_T is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::numpy_T(self);
}
Tensor pixel_shuffle(const Tensor & self, int64_t upscale_factor) {
    if (self.has_names()) {
        AT_ERROR(
            "pixel_shuffle is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pixel_shuffle(self, upscale_factor);
}
bool is_pinned(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::is_pinned(self);
}
Tensor pin_memory(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR(
            "pin_memory is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pin_memory(self);
}
Tensor pinverse(const Tensor & self, double rcond) {
    if (self.has_names()) {
        AT_ERROR(
            "pinverse is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pinverse(self, rcond);
}
Tensor poisson_nll_loss(const Tensor & input, const Tensor & target, bool log_input, bool full, double eps, int64_t reduction) {
    if (input.has_names() || target.has_names()) {
        AT_ERROR(
            "poisson_nll_loss is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::poisson_nll_loss(input, target, log_input, full, eps, reduction);
}
Tensor scalar_tensor(Scalar s, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::scalar_tensor(s, options);
}
Tensor rand(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options) {

    // DeviceGuard omitted
    return at::native::rand(size, names, options);
}
Tensor rand(IntArrayRef size, Generator * generator, c10::optional<DimnameList> names, const TensorOptions & options) {

    // DeviceGuard omitted
    return at::native::rand(size, generator, names, options);
}
Tensor rand(IntArrayRef size, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::rand(size, options);
}
Tensor rand(IntArrayRef size, Generator * generator, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::rand(size, generator, options);
}
Tensor & rand_out(Tensor & out, IntArrayRef size) {
    if (out.has_names()) {
        AT_ERROR(
            "rand_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::rand_out(out, size);
}
Tensor & rand_out(Tensor & out, IntArrayRef size, Generator * generator) {
    if (out.has_names()) {
        AT_ERROR(
            "rand_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::rand_out(out, size, generator);
}
Tensor rand_like(const Tensor & self, c10::optional<MemoryFormat> memory_format) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rand_like(self, memory_format);
}
Tensor rand_like(const Tensor & self, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {

    const DeviceGuard device_guard(options.device());
    return at::native::rand_like(self, options, memory_format);
}
Tensor randint(int64_t high, IntArrayRef size, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::randint(high, size, options);
}
Tensor randint(int64_t high, IntArrayRef size, Generator * generator, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::randint(high, size, generator, options);
}
Tensor randint(int64_t low, int64_t high, IntArrayRef size, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::randint(low, high, size, options);
}
Tensor randint(int64_t low, int64_t high, IntArrayRef size, Generator * generator, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::randint(low, high, size, generator, options);
}
Tensor & randint_out(Tensor & out, int64_t high, IntArrayRef size) {
    if (out.has_names()) {
        AT_ERROR(
            "randint_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randint_out(out, high, size);
}
Tensor & randint_out(Tensor & out, int64_t high, IntArrayRef size, Generator * generator) {
    if (out.has_names()) {
        AT_ERROR(
            "randint_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randint_out(out, high, size, generator);
}
Tensor & randint_out(Tensor & out, int64_t low, int64_t high, IntArrayRef size) {
    if (out.has_names()) {
        AT_ERROR(
            "randint_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randint_out(out, low, high, size);
}
Tensor & randint_out(Tensor & out, int64_t low, int64_t high, IntArrayRef size, Generator * generator) {
    if (out.has_names()) {
        AT_ERROR(
            "randint_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randint_out(out, low, high, size, generator);
}
Tensor randint_like(const Tensor & self, int64_t high, c10::optional<MemoryFormat> memory_format) {
    if (self.has_names()) {
        AT_ERROR(
            "randint_like is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::randint_like(self, high, memory_format);
}
Tensor randint_like(const Tensor & self, int64_t low, int64_t high, c10::optional<MemoryFormat> memory_format) {
    if (self.has_names()) {
        AT_ERROR(
            "randint_like is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::randint_like(self, low, high, memory_format);
}
Tensor randint_like(const Tensor & self, int64_t high, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
    if (self.has_names()) {
        AT_ERROR(
            "randint_like is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const DeviceGuard device_guard(options.device());
    return at::native::randint_like(self, high, options, memory_format);
}
Tensor randint_like(const Tensor & self, int64_t low, int64_t high, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
    if (self.has_names()) {
        AT_ERROR(
            "randint_like is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const DeviceGuard device_guard(options.device());
    return at::native::randint_like(self, low, high, options, memory_format);
}
Tensor randn(IntArrayRef size, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::randn(size, options);
}
Tensor randn(IntArrayRef size, Generator * generator, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::randn(size, generator, options);
}
Tensor randn(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options) {

    // DeviceGuard omitted
    return at::native::randn(size, names, options);
}
Tensor randn(IntArrayRef size, Generator * generator, c10::optional<DimnameList> names, const TensorOptions & options) {

    // DeviceGuard omitted
    return at::native::randn(size, generator, names, options);
}
Tensor & randn_out(Tensor & out, IntArrayRef size) {
    if (out.has_names()) {
        AT_ERROR(
            "randn_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randn_out(out, size);
}
Tensor & randn_out(Tensor & out, IntArrayRef size, Generator * generator) {
    if (out.has_names()) {
        AT_ERROR(
            "randn_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randn_out(out, size, generator);
}
Tensor randn_like(const Tensor & self, c10::optional<MemoryFormat> memory_format) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::randn_like(self, memory_format);
}
Tensor randn_like(const Tensor & self, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {

    const DeviceGuard device_guard(options.device());
    return at::native::randn_like(self, options, memory_format);
}
Tensor randperm(int64_t n, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::randperm(n, options);
}
Tensor randperm(int64_t n, Generator * generator, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::randperm(n, generator, options);
}
Tensor & randperm_out(Tensor & out, int64_t n) {
    if (out.has_names()) {
        AT_ERROR(
            "randperm_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randperm_out(out, n);
}
Tensor range(Scalar start, Scalar end, Scalar step, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::range(start, end, step, options);
}
Tensor range(Scalar start, Scalar end, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::range(start, end, options);
}
Tensor reciprocal(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reciprocal(self);
}
Tensor & reciprocal_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reciprocal_(self);
}
Tensor & reciprocal_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reciprocal_out(out, self);
}
Tensor neg(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::neg(self);
}
Tensor & neg_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::neg_(self);
}
Tensor repeat(const Tensor & self, IntArrayRef repeats) {
    if (self.has_names()) {
        AT_ERROR(
            "repeat is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::repeat(self, repeats);
}
Tensor repeat_interleave(const Tensor & self, const Tensor & repeats, c10::optional<int64_t> dim) {
    if (self.has_names() || repeats.has_names()) {
        AT_ERROR(
            "repeat_interleave is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::repeat_interleave(self, repeats, dim);
}
Tensor repeat_interleave(const Tensor & self, int64_t repeats, c10::optional<int64_t> dim) {
    if (self.has_names()) {
        AT_ERROR(
            "repeat_interleave is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::repeat_interleave(self, repeats, dim);
}
Tensor reshape(const Tensor & self, IntArrayRef shape) {

    // DeviceGuard omitted
    return at::native::reshape(self, shape);
}
Tensor reshape_as(const Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "reshape_as is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    // DeviceGuard omitted
    return at::native::reshape_as(self, other);
}
Tensor round(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::round(self);
}
Tensor & round_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::round_(self);
}
Tensor rrelu(const Tensor & self, Scalar lower, Scalar upper, bool training, Generator * generator) {
    if (self.has_names()) {
        AT_ERROR(
            "rrelu is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rrelu(self, lower, upper, training, generator);
}
Tensor & rrelu_(Tensor & self, Scalar lower, Scalar upper, bool training, Generator * generator) {
    if (self.has_names()) {
        AT_ERROR(
            "rrelu_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rrelu_(self, lower, upper, training, generator);
}
Tensor hardshrink(const Tensor & self, Scalar lambd) {
    if (self.has_names()) {
        AT_ERROR(
            "hardshrink is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardshrink(self, lambd);
}
Tensor hardshrink_backward(const Tensor & grad_out, const Tensor & self, Scalar lambd) {
    if (grad_out.has_names() || self.has_names()) {
        AT_ERROR(
            "hardshrink_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardshrink_backward(grad_out, self, lambd);
}
Tensor rsqrt(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rsqrt(self);
}
Tensor & rsqrt_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rsqrt_(self);
}
Tensor select(const Tensor & self, Dimname dim, int64_t index) {

    // DeviceGuard omitted
    return at::native::select(self, dim, index);
}
Tensor select(const Tensor & self, int64_t dim, int64_t index) {

    // DeviceGuard omitted
    return at::native::select(self, dim, index);
}
Tensor selu(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR(
            "selu is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::selu(self);
}
Tensor & selu_(Tensor & self) {
    if (self.has_names()) {
        AT_ERROR(
            "selu_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::selu_(self);
}
Tensor celu(const Tensor & self, Scalar alpha) {
    if (self.has_names()) {
        AT_ERROR(
            "celu is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::celu(self, alpha);
}
Tensor & celu_(Tensor & self, Scalar alpha) {
    if (self.has_names()) {
        AT_ERROR(
            "celu_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::celu_(self, alpha);
}
Tensor & sigmoid_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sigmoid_out(out, self);
}
Tensor sin(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sin(self);
}
Tensor & sin_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sin_(self);
}
Tensor sinh(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sinh(self);
}
Tensor & sinh_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sinh_(self);
}
Tensor & sinh_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sinh_out(out, self);
}
Tensor detach(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::detach(self);
}
Tensor & detach_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::detach_(self);
}
int64_t size(const Tensor & self, int64_t dim) {

    // DeviceGuard omitted
    return at::native::size(self, dim);
}
int64_t size(const Tensor & self, Dimname dim) {

    // DeviceGuard omitted
    return at::native::size(self, dim);
}
Tensor slice(const Tensor & self, int64_t dim, int64_t start, int64_t end, int64_t step) {

    // DeviceGuard omitted
    return at::native::slice(self, dim, start, end, step);
}
std::tuple<Tensor,Tensor> slogdet(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR(
            "slogdet is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slogdet(self);
}
Tensor smm(const Tensor & self, const Tensor & mat2) {
    if (self.has_names() || mat2.has_names()) {
        AT_ERROR(
            "smm is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::smm(self, mat2);
}
Tensor softmax(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softmax(self, dim, dtype);
}
Tensor softmax(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softmax(self, dim, dtype);
}
std::vector<Tensor> split(const Tensor & self, int64_t split_size, int64_t dim) {

    // DeviceGuard omitted
    return at::native::split(self, split_size, dim);
}
std::vector<Tensor> split_with_sizes(const Tensor & self, IntArrayRef split_sizes, int64_t dim) {

    // DeviceGuard omitted
    return at::native::split_with_sizes(self, split_sizes, dim);
}
Tensor squeeze(const Tensor & self) {

    // DeviceGuard omitted
    return at::native::squeeze(self);
}
Tensor squeeze(const Tensor & self, int64_t dim) {

    // DeviceGuard omitted
    return at::native::squeeze(self, dim);
}
Tensor squeeze(const Tensor & self, Dimname dim) {

    // DeviceGuard omitted
    return at::native::squeeze(self, dim);
}
Tensor & squeeze_(Tensor & self) {
    if (self.has_names()) {
        AT_ERROR(
            "squeeze_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    // DeviceGuard omitted
    return at::native::squeeze_(self);
}
Tensor & squeeze_(Tensor & self, int64_t dim) {
    if (self.has_names()) {
        AT_ERROR(
            "squeeze_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    // DeviceGuard omitted
    return at::native::squeeze_(self, dim);
}
Tensor & squeeze_(Tensor & self, Dimname dim) {
    if (self.has_names()) {
        AT_ERROR(
            "squeeze_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    // DeviceGuard omitted
    return at::native::squeeze_(self, dim);
}
Tensor sspaddmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {
    if (self.has_names() || mat1.has_names() || mat2.has_names()) {
        AT_ERROR(
            "sspaddmm is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sspaddmm(self, mat1, mat2, beta, alpha);
}
Tensor stack(TensorList tensors, int64_t dim) {
    if (at::has_names(tensors)) {
        AT_ERROR(
            "stack is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::stack(tensors, dim);
}
Tensor & stack_out(Tensor & out, TensorList tensors, int64_t dim) {
    if (out.has_names() || at::has_names(tensors)) {
        AT_ERROR(
            "stack_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::stack_out(out, tensors, dim);
}
Tensor stft(const Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const Tensor & window, bool normalized, bool onesided) {
    if (self.has_names() || window.has_names()) {
        AT_ERROR(
            "stft is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::stft(self, n_fft, hop_length, win_length, window, normalized, onesided);
}
int64_t stride(const Tensor & self, int64_t dim) {

    // DeviceGuard omitted
    return at::native::stride(self, dim);
}
int64_t stride(const Tensor & self, Dimname dim) {

    // DeviceGuard omitted
    return at::native::stride(self, dim);
}
Tensor sum(const Tensor & self, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sum(self, dtype);
}
Tensor sum(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sum(self, dim, keepdim, dtype);
}
Tensor sum(const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sum(self, dim, keepdim, dtype);
}
Tensor & sum_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sum_out(out, self, dim, keepdim, dtype);
}
Tensor & sum_out(Tensor & out, const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sum_out(out, self, dim, keepdim, dtype);
}
Tensor sum_to_size(const Tensor & self, IntArrayRef size) {
    if (self.has_names()) {
        AT_ERROR(
            "sum_to_size is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    // DeviceGuard omitted
    return at::native::sum_to_size(self, size);
}
Tensor sqrt(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sqrt(self);
}
Tensor & sqrt_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sqrt_(self);
}
Tensor & sqrt_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sqrt_out(out, self);
}
Tensor square(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::square(self);
}
Tensor & square_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::square_(self);
}
Tensor std(const Tensor & self, bool unbiased) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std(self, unbiased);
}
Tensor std(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std(self, dim, unbiased, keepdim);
}
std::tuple<Tensor,Tensor> std_mean(const Tensor & self, bool unbiased) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std_mean(self, unbiased);
}
std::tuple<Tensor,Tensor> std_mean(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std_mean(self, dim, unbiased, keepdim);
}
std::tuple<Tensor,Tensor> std_mean(const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std_mean(self, dim, unbiased, keepdim);
}
Tensor & std_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std_out(out, self, dim, unbiased, keepdim);
}
Tensor std(const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std(self, dim, unbiased, keepdim);
}
Tensor & std_out(Tensor & out, const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std_out(out, self, dim, unbiased, keepdim);
}
Tensor prod(const Tensor & self, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prod(self, dtype);
}
Tensor prod(const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prod(self, dim, keepdim, dtype);
}
Tensor & prod_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prod_out(out, self, dim, keepdim, dtype);
}
Tensor prod(const Tensor & self, Dimname dim, bool keepdim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prod(self, dim, keepdim, dtype);
}
Tensor & prod_out(Tensor & out, const Tensor & self, Dimname dim, bool keepdim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prod_out(out, self, dim, keepdim, dtype);
}
Tensor t(const Tensor & self) {

    // DeviceGuard omitted
    return at::native::t(self);
}
Tensor & t_(Tensor & self) {
    if (self.has_names()) {
        AT_ERROR(
            "t_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    // DeviceGuard omitted
    return at::native::t_(self);
}
Tensor tan(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tan(self);
}
Tensor tensordot(const Tensor & self, const Tensor & other, IntArrayRef dims_self, IntArrayRef dims_other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "tensordot is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tensordot(self, other, dims_self, dims_other);
}
Tensor transpose(const Tensor & self, int64_t dim0, int64_t dim1) {

    // DeviceGuard omitted
    return at::native::transpose(self, dim0, dim1);
}
Tensor transpose(const Tensor & self, Dimname dim0, Dimname dim1) {

    // DeviceGuard omitted
    return at::native::transpose(self, dim0, dim1);
}
Tensor & transpose_(Tensor & self, int64_t dim0, int64_t dim1) {
    if (self.has_names()) {
        AT_ERROR(
            "transpose_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    // DeviceGuard omitted
    return at::native::transpose_(self, dim0, dim1);
}
Tensor one_hot(const Tensor & self, int64_t num_classes) {
    if (self.has_names()) {
        AT_ERROR(
            "one_hot is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::one_hot(self, num_classes);
}
Tensor rot90(const Tensor & self, int64_t k, IntArrayRef dims) {
    if (self.has_names()) {
        AT_ERROR(
            "rot90 is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rot90(self, k, dims);
}
Tensor trapz(const Tensor & y, const Tensor & x, int64_t dim) {
    if (y.has_names() || x.has_names()) {
        AT_ERROR(
            "trapz is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(y));
    return at::native::trapz(y, x, dim);
}
Tensor trapz(const Tensor & y, double dx, int64_t dim) {
    if (y.has_names()) {
        AT_ERROR(
            "trapz is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(y));
    return at::native::trapz(y, dx, dim);
}
Tensor _trilinear(const Tensor & i1, const Tensor & i2, const Tensor & i3, IntArrayRef expand1, IntArrayRef expand2, IntArrayRef expand3, IntArrayRef sumdim, int64_t unroll_dim) {
    if (i1.has_names() || i2.has_names() || i3.has_names()) {
        AT_ERROR(
            "_trilinear is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(i1));
    return at::native::_trilinear(i1, i2, i3, expand1, expand2, expand3, sumdim, unroll_dim);
}
Tensor triplet_margin_loss(const Tensor & anchor, const Tensor & positive, const Tensor & negative, double margin, double p, double eps, bool swap, int64_t reduction) {
    if (anchor.has_names() || positive.has_names() || negative.has_names()) {
        AT_ERROR(
            "triplet_margin_loss is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(anchor));
    return at::native::triplet_margin_loss(anchor, positive, negative, margin, p, eps, swap, reduction);
}
Tensor trunc(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::trunc(self);
}
Tensor & trunc_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::trunc_(self);
}
Tensor type_as(const Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "type_as is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::type_as(self, other);
}
bool _has_compatible_shallow_copy_type(const Tensor & self, const Tensor & from) {
    if (self.has_names() || from.has_names()) {
        AT_ERROR(
            "_has_compatible_shallow_copy_type is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_has_compatible_shallow_copy_type(self, from);
}
Tensor _unsafe_view(const Tensor & self, IntArrayRef size) {
    if (self.has_names()) {
        AT_ERROR(
            "_unsafe_view is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_unsafe_view(self, size);
}
Tensor unsqueeze(const Tensor & self, int64_t dim) {
    if (self.has_names()) {
        AT_ERROR(
            "unsqueeze is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    // DeviceGuard omitted
    return at::native::unsqueeze(self, dim);
}
Tensor & unsqueeze_(Tensor & self, int64_t dim) {
    if (self.has_names()) {
        AT_ERROR(
            "unsqueeze_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    // DeviceGuard omitted
    return at::native::unsqueeze_(self, dim);
}
Tensor var(const Tensor & self, bool unbiased) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var(self, unbiased);
}
Tensor var(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var(self, dim, unbiased, keepdim);
}
Tensor & var_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var_out(out, self, dim, unbiased, keepdim);
}
Tensor var(const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var(self, dim, unbiased, keepdim);
}
Tensor & var_out(Tensor & out, const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var_out(out, self, dim, unbiased, keepdim);
}
std::tuple<Tensor,Tensor> var_mean(const Tensor & self, bool unbiased) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var_mean(self, unbiased);
}
std::tuple<Tensor,Tensor> var_mean(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var_mean(self, dim, unbiased, keepdim);
}
std::tuple<Tensor,Tensor> var_mean(const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var_mean(self, dim, unbiased, keepdim);
}
Tensor view_as(const Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "view_as is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    // DeviceGuard omitted
    return at::native::view_as(self, other);
}
Tensor where(const Tensor & condition, const Tensor & self, const Tensor & other) {
    if (condition.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR(
            "where is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::where(condition, self, other);
}
std::vector<Tensor> where(const Tensor & condition) {
    if (condition.has_names()) {
        AT_ERROR(
            "where is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(condition));
    return at::native::where(condition);
}
Tensor _s_where(const Tensor & condition, const Tensor & self, const Tensor & other) {
    if (condition.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR(
            "_s_where is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_s_where(condition, self, other);
}
Tensor norm_except_dim(const Tensor & v, int64_t pow, int64_t dim) {
    if (v.has_names()) {
        AT_ERROR(
            "norm_except_dim is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(v));
    return at::native::norm_except_dim(v, pow, dim);
}
Tensor _weight_norm(const Tensor & v, const Tensor & g, int64_t dim) {
    if (v.has_names() || g.has_names()) {
        AT_ERROR(
            "_weight_norm is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(v));
    return at::native::_weight_norm(v, g, dim);
}
std::tuple<Tensor,Tensor> _weight_norm_differentiable_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim) {
    if (grad_w.has_names() || saved_v.has_names() || saved_g.has_names() || saved_norms.has_names()) {
        AT_ERROR(
            "_weight_norm_differentiable_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(grad_w));
    return at::native::_weight_norm_differentiable_backward(grad_w, saved_v, saved_g, saved_norms, dim);
}
Tensor zeros(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options) {

    // DeviceGuard omitted
    return at::native::zeros(size, names, options);
}
Tensor zeros(IntArrayRef size, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::zeros(size, options);
}
Tensor & zeros_out(Tensor & out, IntArrayRef size) {
    if (out.has_names()) {
        AT_ERROR(
            "zeros_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::zeros_out(out, size);
}
Tensor zeros_like(const Tensor & self, c10::optional<MemoryFormat> memory_format) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::zeros_like(self, memory_format);
}
Tensor zeros_like(const Tensor & self, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {

    const DeviceGuard device_guard(options.device());
    return at::native::zeros_like(self, options, memory_format);
}
Tensor _sparse_sum(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR(
            "_sparse_sum is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_sum(self);
}
Tensor _sparse_sum(const Tensor & self, ScalarType dtype) {
    if (self.has_names()) {
        AT_ERROR(
            "_sparse_sum is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_sum(self, dtype);
}
Tensor _sparse_sum(const Tensor & self, IntArrayRef dim) {
    if (self.has_names()) {
        AT_ERROR(
            "_sparse_sum is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_sum(self, dim);
}
Tensor _sparse_sum(const Tensor & self, IntArrayRef dim, ScalarType dtype) {
    if (self.has_names()) {
        AT_ERROR(
            "_sparse_sum is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_sum(self, dim, dtype);
}
Tensor norm(const Tensor & self, c10::optional<Scalar> p, ScalarType dtype) {
    if (self.has_names()) {
        AT_ERROR(
            "norm is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm(self, p, dtype);
}
Tensor norm(const Tensor & self, Scalar p) {
    if (self.has_names()) {
        AT_ERROR(
            "norm is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm(self, p);
}
Tensor norm(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) {
    if (self.has_names()) {
        AT_ERROR(
            "norm is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm(self, p, dim, keepdim, dtype);
}
Tensor norm(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR(
            "norm is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm(self, p, dim, keepdim);
}
Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR(
            "norm_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm_out(out, self, p, dim, keepdim, dtype);
}
Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR(
            "norm_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm_out(out, self, p, dim, keepdim);
}
Tensor norm(const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim, ScalarType dtype) {
    if (self.has_names()) {
        AT_ERROR(
            "norm is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm(self, p, dim, keepdim, dtype);
}
Tensor norm(const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR(
            "norm is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm(self, p, dim, keepdim);
}
Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim, ScalarType dtype) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR(
            "norm_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm_out(out, self, p, dim, keepdim, dtype);
}
Tensor & norm_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR(
            "norm_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm_out(out, self, p, dim, keepdim);
}
Tensor frobenius_norm(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR(
            "frobenius_norm is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::frobenius_norm(self);
}
Tensor frobenius_norm(const Tensor & self, IntArrayRef dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR(
            "frobenius_norm is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::frobenius_norm(self, dim, keepdim);
}
Tensor & frobenius_norm_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR(
            "frobenius_norm_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::frobenius_norm_out(out, self, dim, keepdim);
}
Tensor nuclear_norm(const Tensor & self, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR(
            "nuclear_norm is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nuclear_norm(self, keepdim);
}
Tensor & nuclear_norm_out(Tensor & out, const Tensor & self, bool keepdim) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR(
            "nuclear_norm_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nuclear_norm_out(out, self, keepdim);
}
Tensor nuclear_norm(const Tensor & self, IntArrayRef dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR(
            "nuclear_norm is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nuclear_norm(self, dim, keepdim);
}
Tensor & nuclear_norm_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR(
            "nuclear_norm_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nuclear_norm_out(out, self, dim, keepdim);
}
Tensor & resize_as_(Tensor & self, const Tensor & the_template, c10::optional<MemoryFormat> memory_format) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::resize_as_(self, the_template, memory_format);
}
Tensor sub(const Tensor & self, Scalar other, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sub(self, other, alpha);
}
Tensor & sub_(Tensor & self, Scalar other, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sub_(self, other, alpha);
}
Tensor rsub(const Tensor & self, const Tensor & other, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rsub(self, other, alpha);
}
Tensor rsub(const Tensor & self, Scalar other, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rsub(self, other, alpha);
}
Tensor _sparse_addmm(const Tensor & self, const Tensor & sparse, const Tensor & dense, Scalar beta, Scalar alpha) {
    if (self.has_names() || sparse.has_names() || dense.has_names()) {
        AT_ERROR(
            "_sparse_addmm is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_addmm(self, sparse, dense, beta, alpha);
}
Tensor sparse_coo_tensor(IntArrayRef size, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::sparse_coo_tensor(size, options);
}
Tensor sparse_coo_tensor(const Tensor & indices, const Tensor & values, const TensorOptions & options) {
    if (indices.has_names() || values.has_names()) {
        AT_ERROR(
            "sparse_coo_tensor is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const DeviceGuard device_guard(options.device());
    return at::native::sparse_coo_tensor(indices, values, options);
}
Tensor sparse_coo_tensor(const Tensor & indices, const Tensor & values, IntArrayRef size, const TensorOptions & options) {
    if (indices.has_names() || values.has_names()) {
        AT_ERROR(
            "sparse_coo_tensor is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const DeviceGuard device_guard(options.device());
    return at::native::sparse_coo_tensor(indices, values, size, options);
}
Tensor _sparse_coo_tensor_unsafe(const Tensor & indices, const Tensor & values, IntArrayRef size, const TensorOptions & options) {
    if (indices.has_names() || values.has_names()) {
        AT_ERROR(
            "_sparse_coo_tensor_unsafe is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const DeviceGuard device_guard(options.device());
    return at::native::_sparse_coo_tensor_unsafe(indices, values, size, options);
}
Tensor to_dense_backward(const Tensor & grad, const Tensor & input) {
    if (grad.has_names() || input.has_names()) {
        AT_ERROR(
            "to_dense_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::to_dense_backward(grad, input);
}
std::vector<Tensor> unbind(const Tensor & self, int64_t dim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::unbind(self, dim);
}
std::vector<Tensor> unbind(const Tensor & self, Dimname dim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::unbind(self, dim);
}
Tensor to_mkldnn_backward(const Tensor & grad, const Tensor & input) {
    if (grad.has_names() || input.has_names()) {
        AT_ERROR(
            "to_mkldnn_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::to_mkldnn_backward(grad, input);
}
Tensor to(const Tensor & self, const TensorOptions & options, bool non_blocking, bool copy, c10::optional<MemoryFormat> memory_format) {

    // DeviceGuard omitted
    return at::native::to(self, options, non_blocking, copy, memory_format);
}
Tensor to(const Tensor & self, Device device, ScalarType dtype, bool non_blocking, bool copy, c10::optional<MemoryFormat> memory_format) {

    // DeviceGuard omitted
    return at::native::to(self, device, dtype, non_blocking, copy, memory_format);
}
Tensor to(const Tensor & self, ScalarType dtype, bool non_blocking, bool copy, c10::optional<MemoryFormat> memory_format) {

    // DeviceGuard omitted
    return at::native::to(self, dtype, non_blocking, copy, memory_format);
}
Tensor to(const Tensor & self, const Tensor & other, bool non_blocking, bool copy, c10::optional<MemoryFormat> memory_format) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "to is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    // DeviceGuard omitted
    return at::native::to(self, other, non_blocking, copy, memory_format);
}
std::vector<Tensor> meshgrid(TensorList tensors) {
    if (at::has_names(tensors)) {
        AT_ERROR(
            "meshgrid is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::meshgrid(tensors);
}
Tensor cartesian_prod(TensorList tensors) {
    if (at::has_names(tensors)) {
        AT_ERROR(
            "cartesian_prod is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::cartesian_prod(tensors);
}
Tensor combinations(const Tensor & self, int64_t r, bool with_replacement) {
    if (self.has_names()) {
        AT_ERROR(
            "combinations is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::combinations(self, r, with_replacement);
}
Scalar item(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::item(self);
}
ScalarType result_type(const Tensor & tensor, const Tensor & other) {
    if (tensor.has_names() || other.has_names()) {
        AT_ERROR(
            "result_type is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(tensor));
    return at::native::result_type(tensor, other);
}
ScalarType result_type(const Tensor & tensor, Scalar other) {
    if (tensor.has_names()) {
        AT_ERROR(
            "result_type is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(tensor));
    return at::native::result_type(tensor, other);
}
ScalarType result_type(Scalar scalar, const Tensor & tensor) {
    if (tensor.has_names()) {
        AT_ERROR(
            "result_type is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(tensor));
    return at::native::result_type(scalar, tensor);
}
ScalarType result_type(Scalar scalar1, Scalar scalar2) {

    // DeviceGuard omitted
    return at::native::result_type(scalar1, scalar2);
}
bool can_cast(ScalarType from, ScalarType to) {

    // DeviceGuard omitted
    return at::native::can_cast(from, to);
}
ScalarType promote_types(ScalarType type1, ScalarType type2) {

    // DeviceGuard omitted
    return at::native::promote_types(type1, type2);
}
std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_differentiable_lstm_cell_backward(const Tensor & grad_hy, const Tensor & grad_cy, const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & input_bias, const Tensor & hidden_bias, const Tensor & cx, const Tensor & cy) {
    if (grad_hy.has_names() || grad_cy.has_names() || input_gates.has_names() || hidden_gates.has_names() || input_bias.has_names() || hidden_bias.has_names() || cx.has_names() || cy.has_names()) {
        AT_ERROR(
            "_thnn_differentiable_lstm_cell_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input_gates));
    return at::native::_thnn_differentiable_lstm_cell_backward(grad_hy, grad_cy, input_gates, hidden_gates, input_bias, hidden_bias, cx, cy);
}
std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_differentiable_gru_cell_backward(const Tensor & grad_hy, const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const Tensor & input_bias, const Tensor & hidden_bias) {
    if (grad_hy.has_names() || input_gates.has_names() || hidden_gates.has_names() || hx.has_names() || input_bias.has_names() || hidden_bias.has_names()) {
        AT_ERROR(
            "_thnn_differentiable_gru_cell_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(grad_hy));
    return at::native::_thnn_differentiable_gru_cell_backward(grad_hy, input_gates, hidden_gates, hx, input_bias, hidden_bias);
}
std::tuple<Tensor,Tensor,Tensor> lstm(const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
    if (input.has_names() || at::has_names(hx) || at::has_names(params)) {
        AT_ERROR(
            "lstm is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::lstm(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}
std::tuple<Tensor,Tensor,Tensor> lstm(const Tensor & data, const Tensor & batch_sizes, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
    if (data.has_names() || batch_sizes.has_names() || at::has_names(hx) || at::has_names(params)) {
        AT_ERROR(
            "lstm is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::lstm(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
}
std::tuple<Tensor,Tensor> gru(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
    if (input.has_names() || hx.has_names() || at::has_names(params)) {
        AT_ERROR(
            "gru is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::gru(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}
std::tuple<Tensor,Tensor> gru(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
    if (data.has_names() || batch_sizes.has_names() || hx.has_names() || at::has_names(params)) {
        AT_ERROR(
            "gru is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::gru(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
}
std::tuple<Tensor,Tensor> rnn_tanh(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
    if (input.has_names() || hx.has_names() || at::has_names(params)) {
        AT_ERROR(
            "rnn_tanh is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::rnn_tanh(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}
std::tuple<Tensor,Tensor> rnn_tanh(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
    if (data.has_names() || batch_sizes.has_names() || hx.has_names() || at::has_names(params)) {
        AT_ERROR(
            "rnn_tanh is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::rnn_tanh(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
}
std::tuple<Tensor,Tensor> rnn_relu(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
    if (input.has_names() || hx.has_names() || at::has_names(params)) {
        AT_ERROR(
            "rnn_relu is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::rnn_relu(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}
std::tuple<Tensor,Tensor> rnn_relu(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
    if (data.has_names() || batch_sizes.has_names() || hx.has_names() || at::has_names(params)) {
        AT_ERROR(
            "rnn_relu is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::rnn_relu(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
}
std::tuple<Tensor,Tensor> lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) {
    if (input.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names() || at::has_names(hx)) {
        AT_ERROR(
            "lstm_cell is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::lstm_cell(input, hx, w_ih, w_hh, b_ih, b_hh);
}
Tensor gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) {
    if (input.has_names() || hx.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names()) {
        AT_ERROR(
            "gru_cell is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::gru_cell(input, hx, w_ih, w_hh, b_ih, b_hh);
}
Tensor rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) {
    if (input.has_names() || hx.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names()) {
        AT_ERROR(
            "rnn_tanh_cell is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::rnn_tanh_cell(input, hx, w_ih, w_hh, b_ih, b_hh);
}
Tensor rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) {
    if (input.has_names() || hx.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names()) {
        AT_ERROR(
            "rnn_relu_cell is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::rnn_relu_cell(input, hx, w_ih, w_hh, b_ih, b_hh);
}
std::tuple<Tensor,Tensor,Tensor> quantized_lstm(const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first, c10::optional<ScalarType> dtype, bool use_dynamic) {
    if (input.has_names() || at::has_names(hx) || at::has_names(params)) {
        AT_ERROR(
            "quantized_lstm is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::quantized_lstm(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first, dtype, use_dynamic);
}
std::tuple<Tensor,Tensor,Tensor> quantized_lstm(const Tensor & data, const Tensor & batch_sizes, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, c10::optional<ScalarType> dtype, bool use_dynamic) {
    if (data.has_names() || batch_sizes.has_names() || at::has_names(hx) || at::has_names(params)) {
        AT_ERROR(
            "quantized_lstm is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::quantized_lstm(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional, dtype, use_dynamic);
}
std::tuple<Tensor,Tensor> quantized_gru(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
    if (input.has_names() || hx.has_names() || at::has_names(params)) {
        AT_ERROR(
            "quantized_gru is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::quantized_gru(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}
std::tuple<Tensor,Tensor> quantized_gru(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
    if (data.has_names() || batch_sizes.has_names() || hx.has_names() || at::has_names(params)) {
        AT_ERROR(
            "quantized_gru is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::quantized_gru(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
}
std::tuple<Tensor,Tensor> quantized_lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) {
    if (input.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names() || packed_ih.has_names() || packed_hh.has_names() || col_offsets_ih.has_names() || col_offsets_hh.has_names() || at::has_names(hx)) {
        AT_ERROR(
            "quantized_lstm_cell is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::quantized_lstm_cell(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
}
Tensor quantized_gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) {
    if (input.has_names() || hx.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names() || packed_ih.has_names() || packed_hh.has_names() || col_offsets_ih.has_names() || col_offsets_hh.has_names()) {
        AT_ERROR(
            "quantized_gru_cell is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::quantized_gru_cell(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
}
Tensor quantized_rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) {
    if (input.has_names() || hx.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names() || packed_ih.has_names() || packed_hh.has_names() || col_offsets_ih.has_names() || col_offsets_hh.has_names()) {
        AT_ERROR(
            "quantized_rnn_relu_cell is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::quantized_rnn_relu_cell(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
}
Tensor quantized_rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) {
    if (input.has_names() || hx.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names() || packed_ih.has_names() || packed_hh.has_names() || col_offsets_ih.has_names() || col_offsets_hh.has_names()) {
        AT_ERROR(
            "quantized_rnn_tanh_cell is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::quantized_rnn_tanh_cell(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
}
std::tuple<Tensor,Tensor> _pack_padded_sequence(const Tensor & input, const Tensor & lengths, bool batch_first) {
    if (input.has_names() || lengths.has_names()) {
        AT_ERROR(
            "_pack_padded_sequence is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_pack_padded_sequence(input, lengths, batch_first);
}
Tensor _pack_padded_sequence_backward(const Tensor & grad, IntArrayRef input_size, const Tensor & batch_sizes, bool batch_first) {
    if (grad.has_names() || batch_sizes.has_names()) {
        AT_ERROR(
            "_pack_padded_sequence_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::_pack_padded_sequence_backward(grad, input_size, batch_sizes, batch_first);
}
std::tuple<Tensor,Tensor> _pad_packed_sequence(const Tensor & data, const Tensor & batch_sizes, bool batch_first, Scalar padding_value, int64_t total_length) {
    if (data.has_names() || batch_sizes.has_names()) {
        AT_ERROR(
            "_pad_packed_sequence is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::_pad_packed_sequence(data, batch_sizes, batch_first, padding_value, total_length);
}
Tensor masked_fill(const Tensor & self, const Tensor & mask, Scalar value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_fill(self, mask, value);
}
Tensor masked_fill(const Tensor & self, const Tensor & mask, const Tensor & value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_fill(self, mask, value);
}
Tensor masked_scatter(const Tensor & self, const Tensor & mask, const Tensor & source) {
    if (self.has_names() || mask.has_names() || source.has_names()) {
        AT_ERROR(
            "masked_scatter is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_scatter(self, mask, source);
}
Tensor index_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
    if (self.has_names() || index.has_names() || source.has_names()) {
        AT_ERROR(
            "index_add is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_add(self, dim, index, source);
}
Tensor index_add(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & source) {
    if (self.has_names() || index.has_names() || source.has_names()) {
        AT_ERROR(
            "index_add is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_add(self, dim, index, source);
}
Tensor index_fill(const Tensor & self, int64_t dim, const Tensor & index, Scalar value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_fill(self, dim, index, value);
}
Tensor index_fill(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_fill(self, dim, index, value);
}
Tensor & index_fill_(Tensor & self, Dimname dim, const Tensor & index, Scalar value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_fill_(self, dim, index, value);
}
Tensor & index_fill_(Tensor & self, Dimname dim, const Tensor & index, const Tensor & value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_fill_(self, dim, index, value);
}
Tensor index_fill(const Tensor & self, Dimname dim, const Tensor & index, Scalar value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_fill(self, dim, index, value);
}
Tensor index_fill(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_fill(self, dim, index, value);
}
Tensor scatter(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) {
    if (self.has_names() || index.has_names() || src.has_names()) {
        AT_ERROR(
            "scatter is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::scatter(self, dim, index, src);
}
Tensor scatter(const Tensor & self, int64_t dim, const Tensor & index, Scalar value) {
    if (self.has_names() || index.has_names()) {
        AT_ERROR(
            "scatter is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::scatter(self, dim, index, value);
}
Tensor scatter(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & src) {
    if (self.has_names() || index.has_names() || src.has_names()) {
        AT_ERROR(
            "scatter is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::scatter(self, dim, index, src);
}
Tensor scatter(const Tensor & self, Dimname dim, const Tensor & index, Scalar value) {
    if (self.has_names() || index.has_names()) {
        AT_ERROR(
            "scatter is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::scatter(self, dim, index, value);
}
Tensor scatter_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) {
    if (self.has_names() || index.has_names() || src.has_names()) {
        AT_ERROR(
            "scatter_add is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::scatter_add(self, dim, index, src);
}
Tensor scatter_add(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & src) {
    if (self.has_names() || index.has_names() || src.has_names()) {
        AT_ERROR(
            "scatter_add is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::scatter_add(self, dim, index, src);
}
Tensor & lt_(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR(
            "lt_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lt_(self, other);
}
Tensor & lt_(Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "lt_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lt_(self, other);
}
Tensor & gt_(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR(
            "gt_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gt_(self, other);
}
Tensor & gt_(Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "gt_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gt_(self, other);
}
Tensor & le_(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR(
            "le_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::le_(self, other);
}
Tensor & le_(Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "le_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::le_(self, other);
}
Tensor & ge_(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR(
            "ge_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ge_(self, other);
}
Tensor & ge_(Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "ge_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ge_(self, other);
}
Tensor & eq_(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR(
            "eq_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::eq_(self, other);
}
Tensor & eq_(Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "eq_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::eq_(self, other);
}
Tensor & ne_(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR(
            "ne_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ne_(self, other);
}
Tensor & ne_(Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "ne_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ne_(self, other);
}
Tensor bitwise_and(const Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR(
            "bitwise_and is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_and(self, other);
}
Tensor bitwise_and(const Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "bitwise_and is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_and(self, other);
}
Tensor & bitwise_and_(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR(
            "bitwise_and_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_and_(self, other);
}
Tensor & bitwise_and_(Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "bitwise_and_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_and_(self, other);
}
Tensor __and__(const Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR(
            "__and__ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__and__(self, other);
}
Tensor __and__(const Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "__and__ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__and__(self, other);
}
Tensor & __iand__(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR(
            "__iand__ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__iand__(self, other);
}
Tensor & __iand__(Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "__iand__ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__iand__(self, other);
}
Tensor bitwise_or(const Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR(
            "bitwise_or is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_or(self, other);
}
Tensor bitwise_or(const Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "bitwise_or is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_or(self, other);
}
Tensor & bitwise_or_(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR(
            "bitwise_or_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_or_(self, other);
}
Tensor & bitwise_or_(Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "bitwise_or_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_or_(self, other);
}
Tensor __or__(const Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR(
            "__or__ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__or__(self, other);
}
Tensor __or__(const Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "__or__ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__or__(self, other);
}
Tensor & __ior__(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR(
            "__ior__ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__ior__(self, other);
}
Tensor & __ior__(Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "__ior__ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__ior__(self, other);
}
Tensor bitwise_xor(const Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR(
            "bitwise_xor is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_xor(self, other);
}
Tensor bitwise_xor(const Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "bitwise_xor is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_xor(self, other);
}
Tensor & bitwise_xor_(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR(
            "bitwise_xor_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_xor_(self, other);
}
Tensor & bitwise_xor_(Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "bitwise_xor_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_xor_(self, other);
}
Tensor __xor__(const Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR(
            "__xor__ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__xor__(self, other);
}
Tensor __xor__(const Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "__xor__ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__xor__(self, other);
}
Tensor & __ixor__(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR(
            "__ixor__ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__ixor__(self, other);
}
Tensor & __ixor__(Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "__ixor__ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__ixor__(self, other);
}
Tensor & atan2_(Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::atan2_(self, other);
}
Tensor & digamma_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::digamma_(self);
}
Tensor & polygamma_(Tensor & self, int64_t n) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::polygamma_(self, n);
}
Tensor & addcdiv_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addcdiv_(self, tensor1, tensor2, value);
}
Tensor & cauchy_(Tensor & self, double median, double sigma, Generator * generator) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cauchy_(self, median, sigma, generator);
}
Tensor & log_normal_(Tensor & self, double mean, double std, Generator * generator) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_normal_(self, mean, std, generator);
}
Tensor & exponential_(Tensor & self, double lambd, Generator * generator) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::exponential_(self, lambd, generator);
}
Tensor & geometric_(Tensor & self, double p, Generator * generator) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::geometric_(self, p, generator);
}
Tensor & cross_out(Tensor & out, const Tensor & self, const Tensor & other, c10::optional<int64_t> dim) {
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR(
            "cross_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cross_out(out, self, other, dim);
}
Tensor cross(const Tensor & self, const Tensor & other, c10::optional<int64_t> dim) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "cross is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cross(self, other, dim);
}
Tensor triu(const Tensor & self, int64_t diagonal) {
    if (self.has_names()) {
        AT_ERROR(
            "triu is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::triu(self, diagonal);
}
Tensor tril(const Tensor & self, int64_t diagonal) {
    if (self.has_names()) {
        AT_ERROR(
            "tril is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tril(self, diagonal);
}
Tensor & index_select_out(Tensor & out, const Tensor & self, Dimname dim, const Tensor & index) {
    if (out.has_names() || self.has_names() || index.has_names()) {
        AT_ERROR(
            "index_select_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_select_out(out, self, dim, index);
}
Tensor index_select(const Tensor & self, Dimname dim, const Tensor & index) {
    if (self.has_names() || index.has_names()) {
        AT_ERROR(
            "index_select is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_select(self, dim, index);
}
std::vector<Tensor> nonzero_numpy(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR(
            "nonzero_numpy is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nonzero_numpy(self);
}
Tensor & gather_out(Tensor & out, const Tensor & self, Dimname dim, const Tensor & index, bool sparse_grad) {
    if (out.has_names() || self.has_names() || index.has_names()) {
        AT_ERROR(
            "gather_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gather_out(out, self, dim, index, sparse_grad);
}
Tensor gather(const Tensor & self, Dimname dim, const Tensor & index, bool sparse_grad) {
    if (self.has_names() || index.has_names()) {
        AT_ERROR(
            "gather is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gather(self, dim, index, sparse_grad);
}
Tensor _gather_sparse_backward(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & grad) {
    if (self.has_names() || index.has_names() || grad.has_names()) {
        AT_ERROR(
            "_gather_sparse_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_gather_sparse_backward(self, dim, index, grad);
}
Tensor & addcmul_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addcmul_out(out, self, tensor1, tensor2, value);
}
Tensor addcmul(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addcmul(self, tensor1, tensor2, value);
}
Tensor & addcmul_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addcmul_(self, tensor1, tensor2, value);
}
Tensor & addcdiv_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addcdiv_out(out, self, tensor1, tensor2, value);
}
Tensor addcdiv(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addcdiv(self, tensor1, tensor2, value);
}
std::tuple<Tensor &,Tensor &> triangular_solve_out(Tensor & X, Tensor & M, const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) {
    if (X.has_names() || M.has_names() || self.has_names() || A.has_names()) {
        AT_ERROR(
            "triangular_solve_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::triangular_solve_out(X, M, self, A, upper, transpose, unitriangular);
}
std::tuple<Tensor,Tensor> triangular_solve(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) {
    if (self.has_names() || A.has_names()) {
        AT_ERROR(
            "triangular_solve is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::triangular_solve(self, A, upper, transpose, unitriangular);
}
std::tuple<Tensor &,Tensor &> symeig_out(Tensor & e, Tensor & V, const Tensor & self, bool eigenvectors, bool upper) {
    if (e.has_names() || V.has_names() || self.has_names()) {
        AT_ERROR(
            "symeig_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::symeig_out(e, V, self, eigenvectors, upper);
}
std::tuple<Tensor,Tensor> symeig(const Tensor & self, bool eigenvectors, bool upper) {
    if (self.has_names()) {
        AT_ERROR(
            "symeig is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::symeig(self, eigenvectors, upper);
}
std::tuple<Tensor &,Tensor &,Tensor &> svd_out(Tensor & U, Tensor & S, Tensor & V, const Tensor & self, bool some, bool compute_uv) {
    if (U.has_names() || S.has_names() || V.has_names() || self.has_names()) {
        AT_ERROR(
            "svd_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::svd_out(U, S, V, self, some, compute_uv);
}
std::tuple<Tensor,Tensor,Tensor> svd(const Tensor & self, bool some, bool compute_uv) {
    if (self.has_names()) {
        AT_ERROR(
            "svd is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::svd(self, some, compute_uv);
}
Tensor & cholesky_out(Tensor & out, const Tensor & self, bool upper) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR(
            "cholesky_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cholesky_out(out, self, upper);
}
Tensor cholesky(const Tensor & self, bool upper) {
    if (self.has_names()) {
        AT_ERROR(
            "cholesky is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cholesky(self, upper);
}
Tensor & cholesky_solve_out(Tensor & out, const Tensor & self, const Tensor & input2, bool upper) {
    if (out.has_names() || self.has_names() || input2.has_names()) {
        AT_ERROR(
            "cholesky_solve_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cholesky_solve_out(out, self, input2, upper);
}
Tensor cholesky_solve(const Tensor & self, const Tensor & input2, bool upper) {
    if (self.has_names() || input2.has_names()) {
        AT_ERROR(
            "cholesky_solve is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cholesky_solve(self, input2, upper);
}
std::tuple<Tensor,Tensor> solve(const Tensor & self, const Tensor & A) {
    if (self.has_names() || A.has_names()) {
        AT_ERROR(
            "solve is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::solve(self, A);
}
std::tuple<Tensor &,Tensor &> solve_out(Tensor & solution, Tensor & lu, const Tensor & self, const Tensor & A) {
    if (solution.has_names() || lu.has_names() || self.has_names() || A.has_names()) {
        AT_ERROR(
            "solve_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::solve_out(solution, lu, self, A);
}
std::tuple<Tensor &,Tensor &> qr_out(Tensor & Q, Tensor & R, const Tensor & self, bool some) {
    if (Q.has_names() || R.has_names() || self.has_names()) {
        AT_ERROR(
            "qr_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::qr_out(Q, R, self, some);
}
std::tuple<Tensor,Tensor> qr(const Tensor & self, bool some) {
    if (self.has_names()) {
        AT_ERROR(
            "qr is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::qr(self, some);
}
Tensor & lu_solve_out(Tensor & out, const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) {
    if (out.has_names() || self.has_names() || LU_data.has_names() || LU_pivots.has_names()) {
        AT_ERROR(
            "lu_solve_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lu_solve_out(out, self, LU_data, LU_pivots);
}
Tensor lu_solve(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) {
    if (self.has_names() || LU_data.has_names() || LU_pivots.has_names()) {
        AT_ERROR(
            "lu_solve is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lu_solve(self, LU_data, LU_pivots);
}
Tensor & digamma_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::digamma_out(out, self);
}
Tensor digamma(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::digamma(self);
}
Tensor & polygamma_out(Tensor & out, int64_t n, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::polygamma_out(out, n, self);
}
Tensor polygamma(int64_t n, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::polygamma(n, self);
}
Tensor sign(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sign(self);
}
Tensor & sign_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sign_(self);
}
Tensor dist(const Tensor & self, const Tensor & other, Scalar p) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "dist is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::dist(self, other, p);
}
Tensor & atan2_out(Tensor & out, const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::atan2_out(out, self, other);
}
Tensor atan2(const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::atan2(self, other);
}
Tensor & min_out(Tensor & out, const Tensor & self, const Tensor & other) {
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR(
            "min_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min_out(out, self, other);
}
Tensor min(const Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "min is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min(self, other);
}
Tensor & max_out(Tensor & out, const Tensor & self, const Tensor & other) {
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR(
            "max_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_out(out, self, other);
}
Tensor max(const Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR(
            "max is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max(self, other);
}
std::tuple<Tensor &,Tensor &> sort_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool descending) {
    if (values.has_names() || indices.has_names() || self.has_names()) {
        AT_ERROR(
            "sort_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sort_out(values, indices, self, dim, descending);
}
std::tuple<Tensor,Tensor> sort(const Tensor & self, Dimname dim, bool descending) {
    if (self.has_names()) {
        AT_ERROR(
            "sort is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sort(self, dim, descending);
}
Tensor argsort(const Tensor & self, int64_t dim, bool descending) {
    if (self.has_names()) {
        AT_ERROR(
            "argsort is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::argsort(self, dim, descending);
}
Tensor argsort(const Tensor & self, Dimname dim, bool descending) {
    if (self.has_names()) {
        AT_ERROR(
            "argsort is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::argsort(self, dim, descending);
}
Tensor all(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::all(self);
}
Tensor normal(double mean, double std, IntArrayRef size, Generator * generator, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::normal(mean, std, size, generator, options);
}
Tensor & normal_out(Tensor & out, double mean, double std, IntArrayRef size, Generator * generator) {
    if (out.has_names()) {
        AT_ERROR(
            "normal_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::normal_out(out, mean, std, size, generator);
}
Tensor alias(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::alias(self);
}
Tensor & mse_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {
    if (out.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR(
            "mse_loss_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mse_loss_out(out, self, target, reduction);
}
Tensor mse_loss(const Tensor & self, const Tensor & target, int64_t reduction) {
    if (self.has_names() || target.has_names()) {
        AT_ERROR(
            "mse_loss is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mse_loss(self, target, reduction);
}
Tensor & l1_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {
    if (out.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR(
            "l1_loss_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::l1_loss_out(out, self, target, reduction);
}
Tensor l1_loss(const Tensor & self, const Tensor & target, int64_t reduction) {
    if (self.has_names() || target.has_names()) {
        AT_ERROR(
            "l1_loss is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::l1_loss(self, target, reduction);
}
Tensor l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
    if (grad_output.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR(
            "l1_loss_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::l1_loss_backward(grad_output, self, target, reduction);
}
Tensor & multilabel_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {
    if (out.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR(
            "multilabel_margin_loss_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::multilabel_margin_loss_out(out, self, target, reduction);
}
Tensor multilabel_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction) {
    if (self.has_names() || target.has_names()) {
        AT_ERROR(
            "multilabel_margin_loss is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::multilabel_margin_loss(self, target, reduction);
}
Tensor & nll_loss_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
    if (out.has_names() || self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR(
            "nll_loss_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nll_loss_out(out, self, target, weight, reduction, ignore_index);
}
Tensor nll_loss(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
    if (self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR(
            "nll_loss is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nll_loss(self, target, weight, reduction, ignore_index);
}
Tensor & nll_loss2d_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
    if (out.has_names() || self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR(
            "nll_loss2d_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nll_loss2d_out(out, self, target, weight, reduction, ignore_index);
}
Tensor nll_loss2d(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
    if (self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR(
            "nll_loss2d is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nll_loss2d(self, target, weight, reduction, ignore_index);
}
Tensor smooth_l1_loss(const Tensor & self, const Tensor & target, int64_t reduction) {
    if (self.has_names() || target.has_names()) {
        AT_ERROR(
            "smooth_l1_loss is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::smooth_l1_loss(self, target, reduction);
}
Tensor smooth_l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
    if (grad_output.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR(
            "smooth_l1_loss_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::smooth_l1_loss_backward(grad_output, self, target, reduction);
}
Tensor & soft_margin_loss_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {
    if (out.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR(
            "soft_margin_loss_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::soft_margin_loss_out(out, self, target, reduction);
}
Tensor soft_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction) {
    if (self.has_names() || target.has_names()) {
        AT_ERROR(
            "soft_margin_loss is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::soft_margin_loss(self, target, reduction);
}
Tensor & soft_margin_loss_backward_out(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR(
            "soft_margin_loss_backward_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::soft_margin_loss_backward_out(grad_input, grad_output, self, target, reduction);
}
Tensor soft_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
    if (grad_output.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR(
            "soft_margin_loss_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::soft_margin_loss_backward(grad_output, self, target, reduction);
}
Tensor & elu_out(Tensor & out, const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR(
            "elu_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::elu_out(out, self, alpha, scale, input_scale);
}
Tensor elu(const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) {
    if (self.has_names()) {
        AT_ERROR(
            "elu is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::elu(self, alpha, scale, input_scale);
}
Tensor elu_backward(const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output) {
    if (grad_output.has_names() || output.has_names()) {
        AT_ERROR(
            "elu_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::elu_backward(grad_output, alpha, scale, input_scale, output);
}
Tensor & elu_(Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) {
    if (self.has_names()) {
        AT_ERROR(
            "elu_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::elu_(self, alpha, scale, input_scale);
}
Tensor & hardtanh_out(Tensor & out, const Tensor & self, Scalar min_val, Scalar max_val) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR(
            "hardtanh_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardtanh_out(out, self, min_val, max_val);
}
Tensor hardtanh(const Tensor & self, Scalar min_val, Scalar max_val) {
    if (self.has_names()) {
        AT_ERROR(
            "hardtanh is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardtanh(self, min_val, max_val);
}
Tensor hardtanh_backward(const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val) {
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR(
            "hardtanh_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardtanh_backward(grad_output, self, min_val, max_val);
}
Tensor & hardtanh_(Tensor & self, Scalar min_val, Scalar max_val) {
    if (self.has_names()) {
        AT_ERROR(
            "hardtanh_ is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardtanh_(self, min_val, max_val);
}
Tensor leaky_relu_backward(const Tensor & grad_output, const Tensor & self, Scalar negative_slope) {
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR(
            "leaky_relu_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::leaky_relu_backward(grad_output, self, negative_slope);
}
Tensor & log_sigmoid_out(Tensor & out, const Tensor & self) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR(
            "log_sigmoid_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_sigmoid_out(out, self);
}
Tensor log_sigmoid(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR(
            "log_sigmoid is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_sigmoid(self);
}
Tensor rrelu_with_noise_backward(const Tensor & grad_output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training) {
    if (grad_output.has_names() || self.has_names() || noise.has_names()) {
        AT_ERROR(
            "rrelu_with_noise_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rrelu_with_noise_backward(grad_output, self, noise, lower, upper, training);
}
Tensor & softplus_out(Tensor & out, const Tensor & self, Scalar beta, Scalar threshold) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR(
            "softplus_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softplus_out(out, self, beta, threshold);
}
Tensor softplus(const Tensor & self, Scalar beta, Scalar threshold) {
    if (self.has_names()) {
        AT_ERROR(
            "softplus is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softplus(self, beta, threshold);
}
Tensor softplus_backward(const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output) {
    if (grad_output.has_names() || self.has_names() || output.has_names()) {
        AT_ERROR(
            "softplus_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softplus_backward(grad_output, self, beta, threshold, output);
}
Tensor & softshrink_out(Tensor & out, const Tensor & self, Scalar lambd) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR(
            "softshrink_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softshrink_out(out, self, lambd);
}
Tensor softshrink(const Tensor & self, Scalar lambd) {
    if (self.has_names()) {
        AT_ERROR(
            "softshrink is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softshrink(self, lambd);
}
Tensor softshrink_backward(const Tensor & grad_output, const Tensor & self, Scalar lambd) {
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR(
            "softshrink_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softshrink_backward(grad_output, self, lambd);
}
Tensor adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size) {
    if (self.has_names()) {
        AT_ERROR(
            "adaptive_avg_pool2d is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool2d(self, output_size);
}
Tensor sigmoid_backward(const Tensor & grad_output, const Tensor & output) {
    if (grad_output.has_names() || output.has_names()) {
        AT_ERROR(
            "sigmoid_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::sigmoid_backward(grad_output, output);
}
Tensor tanh_backward(const Tensor & grad_output, const Tensor & output) {
    if (grad_output.has_names() || output.has_names()) {
        AT_ERROR(
            "tanh_backward is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::tanh_backward(grad_output, output);
}
Tensor & thnn_conv2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
    if (out.has_names() || self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR(
            "thnn_conv2d_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv2d_out(out, self, weight, kernel_size, bias, stride, padding);
}
Tensor thnn_conv2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR(
            "thnn_conv2d is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv2d(self, weight, kernel_size, bias, stride, padding);
}
Tensor & thnn_conv_depthwise2d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
    if (out.has_names() || self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR(
            "thnn_conv_depthwise2d_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv_depthwise2d_out(out, self, weight, kernel_size, bias, stride, padding, dilation);
}
Tensor thnn_conv_depthwise2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR(
            "thnn_conv_depthwise2d is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv_depthwise2d(self, weight, kernel_size, bias, stride, padding, dilation);
}
Tensor & slow_conv3d_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
    if (out.has_names() || self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR(
            "slow_conv3d_out is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv3d_out(out, self, weight, kernel_size, bias, stride, padding);
}
Tensor slow_conv3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR(
            "slow_conv3d is not yet supported with named tensors. Please drop names via "
            "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
            "and set names on the result of the operation.");
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv3d(self, weight, kernel_size, bias, stride, padding);
}
Tensor isfinite(const Tensor & self) {

    // DeviceGuard omitted
    return at::native::isfinite(self);
}
Tensor isinf(const Tensor & self) {

    // DeviceGuard omitted
    return at::native::isinf(self);
}

}  // namespace TypeDefault

#ifndef USE_STATIC_DISPATCH
namespace {
auto registerer = torch::RegisterOperators()
  .op(torch::RegisterOperators::options()
    .schema("aten::_cast_Byte(Tensor self, bool non_blocking=False) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, bool)>(&TypeDefault::_cast_Byte)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_cast_Char(Tensor self, bool non_blocking=False) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, bool)>(&TypeDefault::_cast_Char)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_cast_Double(Tensor self, bool non_blocking=False) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, bool)>(&TypeDefault::_cast_Double)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_cast_Float(Tensor self, bool non_blocking=False) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, bool)>(&TypeDefault::_cast_Float)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_cast_Int(Tensor self, bool non_blocking=False) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, bool)>(&TypeDefault::_cast_Int)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_cast_Long(Tensor self, bool non_blocking=False) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, bool)>(&TypeDefault::_cast_Long)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_cast_Short(Tensor self, bool non_blocking=False) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, bool)>(&TypeDefault::_cast_Short)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_cast_Half(Tensor self, bool non_blocking=False) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, bool)>(&TypeDefault::_cast_Half)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::backward(Tensor self, Tensor? gradient=None, bool keep_graph=False, bool create_graph=False) -> ()")
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::set_data(Tensor(a!) self, Tensor new_data) -> ()")
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::data(Tensor self) -> Tensor")
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::is_leaf(Tensor self) -> bool")
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::output_nr(Tensor self) -> int")
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_version(Tensor self) -> int")
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::requires_grad_(Tensor(a!) self, bool _requires_grad=True) -> Tensor(a!)")
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::retain_grad(Tensor(a!) self) -> ()")
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::rename_(Tensor(a!) self, Dimname[]? names) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, c10::optional<DimnameList>), &TypeDefault::rename_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::rename(Tensor(a) self, Dimname[]? names) -> Tensor(a)")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, c10::optional<DimnameList>), &TypeDefault::rename>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::align_to(Tensor(a) self, Dimname[] names) -> Tensor(a)")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, DimnameList), &TypeDefault::align_to>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::align_to.ellipsis_idx(Tensor(a) self, Dimname[] order, int ellipsis_idx) -> Tensor(a)")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, DimnameList, int64_t), &TypeDefault::align_to>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::align_as(Tensor self, Tensor other) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &), &TypeDefault::align_as>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::align_tensors(Tensor[] tensors) -> Tensor[]")
    .impl_unboxedOnlyCatchAllKernel<std::vector<Tensor> (TensorList), &TypeDefault::align_tensors>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::refine_names(Tensor(a) self, Dimname[] names) -> Tensor(a)")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, DimnameList), &TypeDefault::refine_names>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::unflatten.Dimname(Tensor self, Dimname dim, int[] sizes, Dimname[] names) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Dimname, IntArrayRef, DimnameList), &TypeDefault::unflatten>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::unflatten.int(Tensor self, int dim, int[] sizes, Dimname[] names) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, int64_t, IntArrayRef, DimnameList), &TypeDefault::unflatten>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_debug_has_internal_overlap(Tensor self) -> int")
    .catchAllKernel<int64_t (const Tensor &)>(&TypeDefault::_debug_has_internal_overlap)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_sobol_engine_draw(Tensor quasi, int n, Tensor sobolstate, int dimension, int num_generated, ScalarType? dtype) -> (Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, const Tensor &, int64_t, int64_t, c10::optional<ScalarType>), &TypeDefault::_sobol_engine_draw>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_sobol_engine_ff_(Tensor(a!) self, int n, Tensor sobolstate, int dimension, int num_generated) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, int64_t, const Tensor &, int64_t, int64_t), &TypeDefault::_sobol_engine_ff_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_sobol_engine_scramble_(Tensor(a!) self, Tensor ltm, int dimension) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, int64_t), &TypeDefault::_sobol_engine_scramble_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_sobol_engine_initialize_state_(Tensor(a!) self, int dimension) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, int64_t), &TypeDefault::_sobol_engine_initialize_state_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_reshape_from_tensor(Tensor self, Tensor shape) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::_reshape_from_tensor)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_shape_as_tensor(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::_shape_as_tensor)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::dropout(Tensor input, float p, bool train) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, double, bool)>(&TypeDefault::dropout)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, double, bool), &TypeDefault::dropout_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::feature_dropout(Tensor input, float p, bool train) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, double, bool)>(&TypeDefault::feature_dropout)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::feature_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, double, bool), &TypeDefault::feature_dropout_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::alpha_dropout(Tensor input, float p, bool train) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, double, bool)>(&TypeDefault::alpha_dropout)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::alpha_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, double, bool), &TypeDefault::alpha_dropout_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::feature_alpha_dropout(Tensor input, float p, bool train) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, double, bool)>(&TypeDefault::feature_alpha_dropout)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::feature_alpha_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, double, bool), &TypeDefault::feature_alpha_dropout_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::abs(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::abs)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::abs_(Tensor(a!) self) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &), &TypeDefault::abs_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::abs.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::abs_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::angle(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::angle)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::angle.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::angle_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::real(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::real)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::real.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::real_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::imag(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::imag)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::imag.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::imag_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::conj(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::conj)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::conj.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::conj_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::acos(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::acos)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::acos_(Tensor(a!) self) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &), &TypeDefault::acos_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::acos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::acos_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::avg_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, bool ceil_mode=False, bool count_include_pad=True) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, bool), &TypeDefault::avg_pool1d>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::adaptive_avg_pool1d(Tensor self, int[1] output_size) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef), &TypeDefault::adaptive_avg_pool1d>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::adaptive_max_pool1d(Tensor self, int[1] output_size) -> (Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef), &TypeDefault::adaptive_max_pool1d>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::add.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, Scalar, Scalar)>(&TypeDefault::add)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::add_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, Scalar, Scalar), &TypeDefault::add_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::addr(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(&TypeDefault::addr)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::addr_(Tensor(a!) self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar), &TypeDefault::addr_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar), &TypeDefault::addr_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::affine_grid_generator(Tensor theta, int[] size, bool align_corners) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef, bool), &TypeDefault::affine_grid_generator>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::affine_grid_generator_backward(Tensor grad, int[] size, bool align_corners) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef, bool), &TypeDefault::affine_grid_generator_backward>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::all.dim(Tensor self, int dim, bool keepdim=False) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, int64_t, bool)>(&TypeDefault::all)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::all.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, int64_t, bool), &TypeDefault::all_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::all.dimname(Tensor self, Dimname dim, bool keepdim=False) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Dimname, bool), &TypeDefault::all>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::all.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, Dimname, bool), &TypeDefault::all_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::allclose(Tensor self, Tensor other, float rtol=1e-05, float atol=1e-08, bool equal_nan=False) -> bool")
    .catchAllKernel<bool (const Tensor &, const Tensor &, double, double, bool)>(&TypeDefault::allclose)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::any.dim(Tensor self, int dim, bool keepdim=False) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, int64_t, bool)>(&TypeDefault::any)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::any.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, int64_t, bool), &TypeDefault::any_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::any.dimname(Tensor self, Dimname dim, bool keepdim=False) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Dimname, bool), &TypeDefault::any>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::any.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, Dimname, bool), &TypeDefault::any_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::arange(Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (Scalar, const TensorOptions &), &TypeDefault::arange>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::arange.start(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (Scalar, Scalar, const TensorOptions &), &TypeDefault::arange>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::arange.start_step(Scalar start, Scalar end, Scalar step, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (Scalar, Scalar, Scalar, const TensorOptions &), &TypeDefault::arange>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::arange.out(Scalar end, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, Scalar), &TypeDefault::arange_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_dim_arange(Tensor like, int dim) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, int64_t)>(&TypeDefault::_dim_arange)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::as_strided_(Tensor(a!) self, int[] size, int[] stride, int? storage_offset=None) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, IntArrayRef, IntArrayRef, c10::optional<int64_t>), &TypeDefault::as_strided_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::asin(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::asin)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::asin_(Tensor(a!) self) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &), &TypeDefault::asin_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::asin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::asin_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::atan(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::atan)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_baddbmm_mkl_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar, Scalar), &TypeDefault::_baddbmm_mkl_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::bartlett_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (int64_t, const TensorOptions &), &TypeDefault::bartlett_window>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::bartlett_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (int64_t, bool, const TensorOptions &), &TypeDefault::bartlett_window>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, double, bool), &TypeDefault::batch_norm>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_batch_norm_impl_index(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> (Tensor, Tensor, Tensor, Tensor, int)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, double, bool), &TypeDefault::_batch_norm_impl_index>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_batch_norm_impl_index_backward(int impl_index, Tensor input, Tensor grad_output, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var_transform, bool train, float eps, bool[3] output_mask, Tensor reservedSpace) -> (Tensor, Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor,Tensor> (int64_t, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, std::array<bool,3>, const Tensor &), &TypeDefault::_batch_norm_impl_index_backward>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::bernoulli(Tensor self, *, Generator? generator=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Generator *), &TypeDefault::bernoulli>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::bernoulli.out(Tensor self, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, Generator *), &TypeDefault::bernoulli_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::bernoulli.p(Tensor self, float p, *, Generator? generator=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, double, Generator *), &TypeDefault::bernoulli>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::bilinear(Tensor input1, Tensor input2, Tensor weight, Tensor? bias) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &), &TypeDefault::bilinear>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::binary_cross_entropy_with_logits(Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t), &TypeDefault::binary_cross_entropy_with_logits>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::binary_cross_entropy_with_logits_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t), &TypeDefault::binary_cross_entropy_with_logits_backward>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::bitwise_not(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::bitwise_not)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::bitwise_not_(Tensor(a!) self) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &), &TypeDefault::bitwise_not_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::logical_not(Tensor self) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &), &TypeDefault::logical_not>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::logical_not_(Tensor(a!) self) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &), &TypeDefault::logical_not_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::logical_xor(Tensor self, Tensor other) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &), &TypeDefault::logical_xor>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::logical_xor_(Tensor(a!) self, Tensor other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::logical_xor_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::logical_and(Tensor self, Tensor other) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &), &TypeDefault::logical_and>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::logical_and_(Tensor(a!) self, Tensor other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::logical_and_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::logical_or(Tensor self, Tensor other) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &), &TypeDefault::logical_or>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::logical_or_(Tensor(a!) self, Tensor other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::logical_or_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::blackman_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (int64_t, const TensorOptions &), &TypeDefault::blackman_window>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::blackman_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (int64_t, bool, const TensorOptions &), &TypeDefault::blackman_window>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::broadcast_tensors(Tensor[] tensors) -> Tensor[]")
    .impl_unboxedOnlyCatchAllKernel<std::vector<Tensor> (TensorList), &TypeDefault::broadcast_tensors>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cat(Tensor[] tensors, int dim=0) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (TensorList, int64_t), &TypeDefault::cat>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, TensorList, int64_t), &TypeDefault::cat_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cat.names(Tensor[] tensors, Dimname dim) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (TensorList, Dimname), &TypeDefault::cat>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cat.names_out(Tensor[] tensors, Dimname dim, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, TensorList, Dimname), &TypeDefault::cat_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::ceil(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::ceil)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::ceil_(Tensor(a!) self) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &), &TypeDefault::ceil_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::chain_matmul(Tensor[] matrices) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (TensorList), &TypeDefault::chain_matmul>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::chunk(Tensor(a) self, int chunks, int dim=0) -> Tensor(a)[]")
    .impl_unboxedOnlyCatchAllKernel<std::vector<Tensor> (const Tensor &, int64_t, int64_t), &TypeDefault::chunk>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::clamp_max(Tensor self, Scalar max) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, Scalar)>(&TypeDefault::clamp_max)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::clamp_min(Tensor self, Scalar min) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, Scalar)>(&TypeDefault::clamp_min)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cudnn_is_acceptable(Tensor self) -> bool")
    .catchAllKernel<bool (const Tensor &)>(&TypeDefault::cudnn_is_acceptable)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::constant_pad_nd(Tensor self, int[] pad, Scalar value=0) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef, Scalar), &TypeDefault::constant_pad_nd>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::contiguous(Tensor self, *, MemoryFormat memory_format=contiguous_format) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, MemoryFormat), &TypeDefault::contiguous>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t), &TypeDefault::convolution>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::convolution_overrideable(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t), &TypeDefault::convolution_overrideable>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::convolution_backward_overrideable(Tensor grad_output, Tensor input, Tensor weight, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t, std::array<bool,3>), &TypeDefault::convolution_backward_overrideable>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t, bool, bool, bool), &TypeDefault::_convolution>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_convolution_nogroup(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef), &TypeDefault::_convolution_nogroup>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_convolution_double_backward(Tensor? ggI, Tensor? ggW, Tensor? ggb, Tensor gO, Tensor weight, Tensor self, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool[3] output_mask) -> (Tensor, Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, bool, IntArrayRef, int64_t, bool, bool, bool, std::array<bool,3>), &TypeDefault::_convolution_double_backward>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::conv1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=1, int[1] padding=0, int[1] dilation=1, int groups=1) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t), &TypeDefault::conv1d>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::conv2d(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1, int groups=1) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t), &TypeDefault::conv2d>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::conv3d(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] dilation=1, int groups=1) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t), &TypeDefault::conv3d>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::conv_tbc(Tensor self, Tensor weight, Tensor bias, int pad=0) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t)>(&TypeDefault::conv_tbc)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::conv_tbc_backward(Tensor self, Tensor input, Tensor weight, Tensor bias, int pad) -> (Tensor, Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t), &TypeDefault::conv_tbc_backward>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::conv_transpose1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=1, int[1] padding=0, int[1] output_padding=0, int groups=1, int[1] dilation=1) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, IntArrayRef), &TypeDefault::conv_transpose1d>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::conv_transpose2d.input(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int groups=1, int[2] dilation=1) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, IntArrayRef), &TypeDefault::conv_transpose2d>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::conv_transpose3d.input(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int groups=1, int[3] dilation=1) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, IntArrayRef), &TypeDefault::conv_transpose3d>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::copy_(Tensor(a!) self, Tensor src, bool non_blocking=False) -> Tensor(a!)")
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cos(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::cos)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cosh(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::cosh)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cosine_embedding_loss(Tensor input1, Tensor input2, Tensor target, float margin=0.0, int reduction=Mean) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, double, int64_t)>(&TypeDefault::cosine_embedding_loss)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cummax(Tensor self, int dim) -> (Tensor values, Tensor indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, int64_t), &TypeDefault::cummax>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cummax.out(Tensor self, int dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t), &TypeDefault::cummax_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cummax.dimname(Tensor self, Dimname dim) -> (Tensor values, Tensor indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, Dimname), &TypeDefault::cummax>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cummax.dimname_out(Tensor self, Dimname dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, Dimname), &TypeDefault::cummax_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cummin(Tensor self, int dim) -> (Tensor values, Tensor indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, int64_t), &TypeDefault::cummin>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cummin.out(Tensor self, int dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t), &TypeDefault::cummin_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cummin.dimname(Tensor self, Dimname dim) -> (Tensor values, Tensor indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, Dimname), &TypeDefault::cummin>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cummin.dimname_out(Tensor self, Dimname dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, Dimname), &TypeDefault::cummin_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cumprod(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>), &TypeDefault::cumprod>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cumprod.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, int64_t, c10::optional<ScalarType>), &TypeDefault::cumprod_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cumprod.dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Dimname, c10::optional<ScalarType>), &TypeDefault::cumprod>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cumprod.dimname_out(Tensor self, Dimname dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, Dimname, c10::optional<ScalarType>), &TypeDefault::cumprod_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cumsum(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>), &TypeDefault::cumsum>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cumsum.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, int64_t, c10::optional<ScalarType>), &TypeDefault::cumsum_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cumsum.dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Dimname, c10::optional<ScalarType>), &TypeDefault::cumsum>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cumsum.dimname_out(Tensor self, Dimname dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, Dimname, c10::optional<ScalarType>), &TypeDefault::cumsum_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::ctc_loss.IntList(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, int reduction=Mean, bool zero_infinity=False) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, int64_t, int64_t, bool), &TypeDefault::ctc_loss>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::ctc_loss.Tensor(Tensor log_probs, Tensor targets, Tensor input_lengths, Tensor target_lengths, int blank=0, int reduction=Mean, bool zero_infinity=False) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t, bool)>(&TypeDefault::ctc_loss)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::det(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::det)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::diag_embed(Tensor self, int offset=0, int dim1=-2, int dim2=-1) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, int64_t, int64_t, int64_t)>(&TypeDefault::diag_embed)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::diagflat(Tensor self, int offset=0) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, int64_t)>(&TypeDefault::diagflat)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::diagonal(Tensor(a) self, int offset=0, int dim1=0, int dim2=1) -> Tensor(a)")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, int64_t, int64_t, int64_t), &TypeDefault::diagonal>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::diagonal.Dimname(Tensor(a) self, *, Dimname outdim, Dimname dim1, Dimname dim2, int offset=0) -> Tensor(a)")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Dimname, Dimname, Dimname, int64_t), &TypeDefault::diagonal>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::fill_diagonal_(Tensor(a!) self, Scalar fill_value, bool wrap=False) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, Scalar, bool), &TypeDefault::fill_diagonal_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::div.Scalar(Tensor self, Scalar other) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, Scalar)>(&TypeDefault::div)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::div_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, Scalar), &TypeDefault::div_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::dot.out(Tensor self, Tensor tensor, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &), &TypeDefault::dot_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::einsum(str equation, Tensor[] tensors) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (std::string, TensorList), &TypeDefault::einsum>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::embedding(Tensor weight, Tensor indices, int padding_idx=-1, bool scale_grad_by_freq=False, bool sparse=False) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, int64_t, bool, bool)>(&TypeDefault::embedding)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::embedding_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq, bool sparse) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, int64_t, int64_t, bool, bool)>(&TypeDefault::embedding_backward)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::embedding_sparse_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, int64_t, int64_t, bool)>(&TypeDefault::embedding_sparse_backward)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False) -> (Tensor, Tensor, Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, bool, int64_t, bool, const Tensor &, bool), &TypeDefault::embedding_bag>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_embedding_bag_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, bool sparse, Tensor? per_sample_weights) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, bool, int64_t, bool, const Tensor &), &TypeDefault::_embedding_bag_backward>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_embedding_bag_sparse_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, bool, int64_t, const Tensor &), &TypeDefault::_embedding_bag_sparse_backward>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::empty.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (IntArrayRef, c10::optional<DimnameList>, const TensorOptions &, c10::optional<MemoryFormat>), &TypeDefault::empty>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::new_empty(Tensor self, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef, const TensorOptions &), &TypeDefault::new_empty>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::new_full(Tensor self, int[] size, Scalar fill_value, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef, Scalar, const TensorOptions &), &TypeDefault::new_full>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::new_zeros(Tensor self, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef, const TensorOptions &), &TypeDefault::new_zeros>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::resize_(Tensor(a!) self, int[] size, *, MemoryFormat? memory_format=None) -> Tensor(a!)")
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::empty.out(int[] size, *, MemoryFormat? memory_format=None, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, IntArrayRef, c10::optional<MemoryFormat>), &TypeDefault::empty_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::empty_like(Tensor self, *, MemoryFormat? memory_format=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, c10::optional<MemoryFormat>), &TypeDefault::empty_like>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::empty_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False, MemoryFormat? memory_format=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const TensorOptions &, c10::optional<MemoryFormat>), &TypeDefault::empty_like>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::erf(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::erf)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::erfc(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::erfc)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::exp(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::exp)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::expm1(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::expm1)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::expm1_(Tensor(a!) self) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &), &TypeDefault::expm1_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::expand(Tensor(a) self, int[] size, *, bool implicit=False) -> Tensor(a)")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef, bool), &TypeDefault::expand>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::expand_as(Tensor self, Tensor other) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::expand_as)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::eye(int n, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (int64_t, const TensorOptions &), &TypeDefault::eye>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::eye.m(int n, int m, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (int64_t, int64_t, const TensorOptions &), &TypeDefault::eye>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::flatten.using_ints(Tensor self, int start_dim=0, int end_dim=-1) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, int64_t, int64_t)>(&TypeDefault::flatten)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::flatten.named_out_dim(Tensor self, int start_dim, int end_dim, Dimname out_dim) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, int64_t, int64_t, Dimname), &TypeDefault::flatten>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::flatten.using_names(Tensor self, Dimname start_dim, Dimname end_dim, Dimname out_dim) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Dimname, Dimname, Dimname), &TypeDefault::flatten>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::flatten.DimnameList(Tensor self, Dimname[] dims, Dimname out_dim) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, DimnameList, Dimname), &TypeDefault::flatten>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::fill_.Scalar(Tensor(a!) self, Scalar value) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, Scalar), &TypeDefault::fill_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::fill_.Tensor(Tensor(a!) self, Tensor value) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::fill_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::floor(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::floor)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::floor_(Tensor(a!) self) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &), &TypeDefault::floor_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::floor_divide(Tensor input, Tensor other) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &), &TypeDefault::floor_divide>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::floor_divide.Scalar(Tensor input, Scalar other) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Scalar), &TypeDefault::floor_divide>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::frac(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::frac)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::frac_(Tensor(a!) self) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &), &TypeDefault::frac_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::frac.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::frac_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::full.names(int[] size, Scalar fill_value, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (IntArrayRef, Scalar, c10::optional<DimnameList>, const TensorOptions &), &TypeDefault::full>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::full(int[] size, Scalar fill_value, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (IntArrayRef, Scalar, const TensorOptions &), &TypeDefault::full>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::full.out(int[] size, Scalar fill_value, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, IntArrayRef, Scalar), &TypeDefault::full_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::full_like(Tensor self, Scalar fill_value, *, MemoryFormat? memory_format=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Scalar, c10::optional<MemoryFormat>), &TypeDefault::full_like>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::full_like.dtype(Tensor self, Scalar fill_value, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False, MemoryFormat? memory_format=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Scalar, const TensorOptions &, c10::optional<MemoryFormat>), &TypeDefault::full_like>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::grid_sampler(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, int64_t, int64_t, bool)>(&TypeDefault::grid_sampler)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::hann_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (int64_t, const TensorOptions &), &TypeDefault::hann_window>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::hann_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (int64_t, bool, const TensorOptions &), &TypeDefault::hann_window>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::hamming_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (int64_t, const TensorOptions &), &TypeDefault::hamming_window>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::hamming_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (int64_t, bool, const TensorOptions &), &TypeDefault::hamming_window>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::hamming_window.periodic_alpha(int window_length, bool periodic, float alpha, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (int64_t, bool, double, const TensorOptions &), &TypeDefault::hamming_window>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::hamming_window.periodic_alpha_beta(int window_length, bool periodic, float alpha, float beta, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (int64_t, bool, double, double, const TensorOptions &), &TypeDefault::hamming_window>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::hinge_embedding_loss(Tensor self, Tensor target, float margin=1.0, int reduction=Mean) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, double, int64_t)>(&TypeDefault::hinge_embedding_loss)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::group_norm(Tensor input, int num_groups, Tensor? weight=None, Tensor? bias=None, float eps=1e-05, bool cudnn_enabled=True) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, int64_t, const Tensor &, const Tensor &, double, bool), &TypeDefault::group_norm>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::fft(Tensor self, int signal_ndim, bool normalized=False) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, int64_t, bool)>(&TypeDefault::fft)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::ifft(Tensor self, int signal_ndim, bool normalized=False) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, int64_t, bool)>(&TypeDefault::ifft)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::rfft(Tensor self, int signal_ndim, bool normalized=False, bool onesided=True) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, int64_t, bool, bool)>(&TypeDefault::rfft)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::irfft(Tensor self, int signal_ndim, bool normalized=False, bool onesided=True, int[] signal_sizes=[]) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, int64_t, bool, bool, IntArrayRef), &TypeDefault::irfft>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_cufft_get_plan_cache_size(int device_index) -> int")
    .catchAllKernel<int64_t (int64_t)>(&TypeDefault::_cufft_get_plan_cache_size)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_cufft_get_plan_cache_max_size(int device_index) -> int")
    .catchAllKernel<int64_t (int64_t)>(&TypeDefault::_cufft_get_plan_cache_max_size)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_cufft_set_plan_cache_max_size(int device_index, int max_size) -> ()")
    .impl_unboxedOnlyCatchAllKernel<void (int64_t, int64_t), &TypeDefault::_cufft_set_plan_cache_max_size>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_cufft_clear_plan_cache(int device_index) -> ()")
    .impl_unboxedOnlyCatchAllKernel<void (int64_t), &TypeDefault::_cufft_clear_plan_cache>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::index.Tensor(Tensor self, Tensor?[] indices) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, TensorList), &TypeDefault::index>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::index_copy_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, int64_t, const Tensor &, const Tensor &), &TypeDefault::index_copy_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::index_copy(Tensor self, int dim, Tensor index, Tensor source) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, int64_t, const Tensor &, const Tensor &)>(&TypeDefault::index_copy)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::index_copy_.dimname(Tensor(a!) self, Dimname dim, Tensor index, Tensor source) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, Dimname, const Tensor &, const Tensor &), &TypeDefault::index_copy_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::index_copy.dimname(Tensor self, Dimname dim, Tensor index, Tensor source) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Dimname, const Tensor &, const Tensor &), &TypeDefault::index_copy>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::index_put_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, TensorList, const Tensor &, bool), &TypeDefault::index_put_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::index_put(Tensor self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, TensorList, const Tensor &, bool), &TypeDefault::index_put>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_index_put_impl_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False, bool unsafe=False) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, TensorList, const Tensor &, bool, bool), &TypeDefault::_index_put_impl_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::instance_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool use_input_stats, float momentum, float eps, bool cudnn_enabled) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, bool, double, double, bool), &TypeDefault::instance_norm>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::inverse(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::inverse)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::inverse.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::inverse_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::isclose(Tensor self, Tensor other, float rtol=1e-05, float atol=1e-08, bool equal_nan=False) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, double, double, bool)>(&TypeDefault::isclose)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::is_distributed(Tensor self) -> bool")
    .catchAllKernel<bool (const Tensor &)>(&TypeDefault::is_distributed)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::is_floating_point(Tensor self) -> bool")
    .catchAllKernel<bool (const Tensor &)>(&TypeDefault::is_floating_point)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::is_complex(Tensor self) -> bool")
    .catchAllKernel<bool (const Tensor &)>(&TypeDefault::is_complex)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::is_nonzero(Tensor self) -> bool")
    .catchAllKernel<bool (const Tensor &)>(&TypeDefault::is_nonzero)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::is_same_size(Tensor self, Tensor other) -> bool")
    .catchAllKernel<bool (const Tensor &, const Tensor &)>(&TypeDefault::is_same_size)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::is_signed(Tensor self) -> bool")
    .catchAllKernel<bool (const Tensor &)>(&TypeDefault::is_signed)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::kl_div(Tensor self, Tensor target, int reduction=Mean) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, int64_t)>(&TypeDefault::kl_div)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::kthvalue(Tensor self, int k, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, int64_t, bool), &TypeDefault::kthvalue>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::kthvalue.dimname(Tensor self, int k, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, Dimname, bool), &TypeDefault::kthvalue>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::kthvalue.dimname_out(Tensor self, int k, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, Dimname, bool), &TypeDefault::kthvalue_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::layer_norm(Tensor input, int[] normalized_shape, Tensor? weight=None, Tensor? bias=None, float eps=1e-05, bool cudnn_enable=True) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef, const Tensor &, const Tensor &, double, bool), &TypeDefault::layer_norm>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::linear(Tensor input, Tensor weight, Tensor? bias=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &), &TypeDefault::linear>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::fbgemm_linear_int8_weight_fp32_activation(Tensor input, Tensor weight, Tensor packed, Tensor col_offsets, Scalar weight_scale, Scalar weight_zero_point, Tensor bias) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &), &TypeDefault::fbgemm_linear_int8_weight_fp32_activation>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::fbgemm_linear_int8_weight(Tensor input, Tensor weight, Tensor packed, Tensor col_offsets, Scalar weight_scale, Scalar weight_zero_point, Tensor bias) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &)>(&TypeDefault::fbgemm_linear_int8_weight)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::fbgemm_linear_quantize_weight(Tensor input) -> (Tensor, Tensor, float, int)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor,double,int64_t> (const Tensor &), &TypeDefault::fbgemm_linear_quantize_weight>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::fbgemm_pack_gemm_matrix_fp16(Tensor input) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::fbgemm_pack_gemm_matrix_fp16)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::fbgemm_linear_fp16_weight_fp32_activation(Tensor input, Tensor packed_weight, Tensor bias) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &), &TypeDefault::fbgemm_linear_fp16_weight_fp32_activation>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::fbgemm_linear_fp16_weight(Tensor input, Tensor packed_weight, Tensor bias) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &)>(&TypeDefault::fbgemm_linear_fp16_weight)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::fbgemm_pack_quantized_matrix(Tensor input) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::fbgemm_pack_quantized_matrix)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::fbgemm_pack_quantized_matrix.KN(Tensor input, int K, int N) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, int64_t, int64_t)>(&TypeDefault::fbgemm_pack_quantized_matrix)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::linspace(Scalar start, Scalar end, int steps=100, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (Scalar, Scalar, int64_t, const TensorOptions &), &TypeDefault::linspace>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::log(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::log)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::log_(Tensor(a!) self) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &), &TypeDefault::log_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::log10(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::log10)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::log10_(Tensor(a!) self) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &), &TypeDefault::log10_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::log1p(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::log1p)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::log2(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::log2)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::log2_(Tensor(a!) self) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &), &TypeDefault::log2_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::logdet(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::logdet)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::logspace(Scalar start, Scalar end, int steps=100, float base=10.0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (Scalar, Scalar, int64_t, double, const TensorOptions &), &TypeDefault::logspace>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::log_softmax.int(Tensor self, int dim, ScalarType? dtype=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>), &TypeDefault::log_softmax>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::log_softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Dimname, c10::optional<ScalarType>), &TypeDefault::log_softmax>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::logsumexp(Tensor self, int[1] dim, bool keepdim=False) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef, bool), &TypeDefault::logsumexp>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::logsumexp.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool), &TypeDefault::logsumexp_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::logsumexp.names(Tensor self, Dimname[1] dim, bool keepdim=False) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, DimnameList, bool), &TypeDefault::logsumexp>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::logsumexp.names_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, DimnameList, bool), &TypeDefault::logsumexp_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::margin_ranking_loss(Tensor input1, Tensor input2, Tensor target, float margin=0.0, int reduction=Mean) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, double, int64_t)>(&TypeDefault::margin_ranking_loss)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::matmul(Tensor self, Tensor other) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::matmul)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::matmul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &), &TypeDefault::matmul_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::matrix_rank.tol(Tensor self, float tol, bool symmetric=False) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, double, bool)>(&TypeDefault::matrix_rank)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::matrix_rank(Tensor self, bool symmetric=False) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, bool)>(&TypeDefault::matrix_rank)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::matrix_power(Tensor self, int n) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, int64_t)>(&TypeDefault::matrix_power)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::max.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, bool), &TypeDefault::max>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::max.dim_max(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, bool), &TypeDefault::max_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::max_values(Tensor self, int[1] dim, bool keepdim=False) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef, bool), &TypeDefault::max_values>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::max.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, Dimname, bool), &TypeDefault::max>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::max.names_dim_max(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, Dimname, bool), &TypeDefault::max_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::max_values.names(Tensor self, Dimname[1] dim, bool keepdim=False) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, DimnameList, bool), &TypeDefault::max_values>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::max_pool1d_with_indices(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, int[1] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool), &TypeDefault::max_pool1d_with_indices>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::max_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, int[1] dilation=1, bool ceil_mode=False) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool), &TypeDefault::max_pool1d>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool), &TypeDefault::max_pool2d>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::max_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, bool), &TypeDefault::max_pool3d>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::mean.names_dim(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, DimnameList, bool, c10::optional<ScalarType>), &TypeDefault::mean>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::mean.names_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, DimnameList, bool, c10::optional<ScalarType>), &TypeDefault::mean_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::median.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, bool), &TypeDefault::median>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::median.dim_values(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, bool), &TypeDefault::median_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::median.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, Dimname, bool), &TypeDefault::median>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::median.names_dim_values(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, Dimname, bool), &TypeDefault::median_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::min.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, bool), &TypeDefault::min>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::min.dim_min(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, bool), &TypeDefault::min_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::min_values(Tensor self, int[1] dim, bool keepdim=False) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef, bool), &TypeDefault::min_values>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::min.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, Dimname, bool), &TypeDefault::min>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::min.names_dim_min(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, Dimname, bool), &TypeDefault::min_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::min_values.names(Tensor self, Dimname[1] dim, bool keepdim=False) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, DimnameList, bool), &TypeDefault::min_values>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::mkldnn_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t), &TypeDefault::mkldnn_convolution>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::mkldnn_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool bias_defined) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool), &TypeDefault::mkldnn_convolution_backward_input>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::mkldnn_convolution_backward_weights(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool bias_defined) -> (Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (IntArrayRef, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, bool), &TypeDefault::mkldnn_convolution_backward_weights>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::mkldnn_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, int64_t, std::array<bool,3>), &TypeDefault::mkldnn_convolution_backward>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_sparse_mm(Tensor sparse, Tensor dense) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::_sparse_mm)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::mode(Tensor self, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, int64_t, bool), &TypeDefault::mode>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::mode.values(Tensor self, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, int64_t, bool), &TypeDefault::mode_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::mode.dimname(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, Dimname, bool), &TypeDefault::mode>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::mode.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, Dimname, bool), &TypeDefault::mode_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::mul.Scalar(Tensor self, Scalar other) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, Scalar)>(&TypeDefault::mul)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::mul_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, Scalar), &TypeDefault::mul_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::mvlgamma(Tensor self, int p) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, int64_t)>(&TypeDefault::mvlgamma)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::mvlgamma_(Tensor(a!) self, int p) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, int64_t), &TypeDefault::mvlgamma_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::narrow(Tensor(a) self, int dim, int start, int length) -> Tensor(a)")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, int64_t, int64_t, int64_t), &TypeDefault::narrow>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_nnpack_available() -> bool")
    .catchAllKernel<bool ()>(&TypeDefault::_nnpack_available)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_nnpack_spatial_convolution(Tensor input, Tensor weight, Tensor? bias, int[2] padding, int[2] stride=1) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef), &TypeDefault::_nnpack_spatial_convolution>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_nnpack_spatial_convolution_backward(Tensor input, Tensor grad_output, Tensor weight, int[2] padding, bool[3] output_mask) -> (Tensor, Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, std::array<bool,3>), &TypeDefault::_nnpack_spatial_convolution_backward>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_nnpack_spatial_convolution_backward_input(Tensor input, Tensor grad_output, Tensor weight, int[2] padding) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef), &TypeDefault::_nnpack_spatial_convolution_backward_input>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_nnpack_spatial_convolution_backward_weight(Tensor input, int[] weightsize, Tensor grad_output, int[2] padding) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef, const Tensor &, IntArrayRef), &TypeDefault::_nnpack_spatial_convolution_backward_weight>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::ones.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (IntArrayRef, c10::optional<DimnameList>, const TensorOptions &), &TypeDefault::ones>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::ones(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (IntArrayRef, const TensorOptions &), &TypeDefault::ones>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::ones.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, IntArrayRef), &TypeDefault::ones_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::ones_like(Tensor self, *, MemoryFormat? memory_format=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, c10::optional<MemoryFormat>), &TypeDefault::ones_like>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::ones_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False, MemoryFormat? memory_format=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const TensorOptions &, c10::optional<MemoryFormat>), &TypeDefault::ones_like>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::pairwise_distance(Tensor x1, Tensor x2, float p=2, float eps=1e-06, bool keepdim=False) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, double, double, bool)>(&TypeDefault::pairwise_distance)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cdist(Tensor x1, Tensor x2, float p=2, int? compute_mode=None) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, double, c10::optional<int64_t>)>(&TypeDefault::cdist)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_cdist_backward(Tensor grad, Tensor x1, Tensor x2, float p, Tensor cdist) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, double, const Tensor &)>(&TypeDefault::_cdist_backward)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::pdist(Tensor self, float p=2) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, double)>(&TypeDefault::pdist)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_pdist_forward(Tensor self, float p=2) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, double)>(&TypeDefault::_pdist_forward)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_pdist_backward(Tensor grad, Tensor self, float p, Tensor pdist) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, double, const Tensor &)>(&TypeDefault::_pdist_backward)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cosine_similarity(Tensor x1, Tensor x2, int dim=1, float eps=1e-08) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, int64_t, double)>(&TypeDefault::cosine_similarity)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::permute(Tensor(a) self, int[] dims) -> Tensor(a)")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef), &TypeDefault::permute>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::numpy_T(Tensor(a) self) -> Tensor(a)")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &), &TypeDefault::numpy_T>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::pixel_shuffle(Tensor self, int upscale_factor) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, int64_t)>(&TypeDefault::pixel_shuffle)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::is_pinned(Tensor self) -> bool")
    .catchAllKernel<bool (const Tensor &)>(&TypeDefault::is_pinned)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::pin_memory(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::pin_memory)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::pinverse(Tensor self, float rcond=1e-15) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, double)>(&TypeDefault::pinverse)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::poisson_nll_loss(Tensor input, Tensor target, bool log_input, bool full, float eps, int reduction) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, bool, bool, double, int64_t)>(&TypeDefault::poisson_nll_loss)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::scalar_tensor(Scalar s, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (Scalar, const TensorOptions &), &TypeDefault::scalar_tensor>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::rand.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (IntArrayRef, c10::optional<DimnameList>, const TensorOptions &), &TypeDefault::rand>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::rand.generator_with_names(int[] size, *, Generator? generator, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (IntArrayRef, Generator *, c10::optional<DimnameList>, const TensorOptions &), &TypeDefault::rand>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::rand(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (IntArrayRef, const TensorOptions &), &TypeDefault::rand>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::rand.generator(int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (IntArrayRef, Generator *, const TensorOptions &), &TypeDefault::rand>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::rand.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, IntArrayRef), &TypeDefault::rand_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::rand.generator_out(int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, IntArrayRef, Generator *), &TypeDefault::rand_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::rand_like(Tensor self, *, MemoryFormat? memory_format=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, c10::optional<MemoryFormat>), &TypeDefault::rand_like>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::rand_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False, MemoryFormat? memory_format=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const TensorOptions &, c10::optional<MemoryFormat>), &TypeDefault::rand_like>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::randint(int high, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (int64_t, IntArrayRef, const TensorOptions &), &TypeDefault::randint>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::randint.generator(int high, int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (int64_t, IntArrayRef, Generator *, const TensorOptions &), &TypeDefault::randint>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::randint.low(int low, int high, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (int64_t, int64_t, IntArrayRef, const TensorOptions &), &TypeDefault::randint>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::randint.low_generator(int low, int high, int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (int64_t, int64_t, IntArrayRef, Generator *, const TensorOptions &), &TypeDefault::randint>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::randint.out(int high, int[] size, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, int64_t, IntArrayRef), &TypeDefault::randint_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::randint.generator_out(int high, int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, int64_t, IntArrayRef, Generator *), &TypeDefault::randint_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::randint.low_out(int low, int high, int[] size, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, int64_t, int64_t, IntArrayRef), &TypeDefault::randint_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::randint.low_generator_out(int low, int high, int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, int64_t, int64_t, IntArrayRef, Generator *), &TypeDefault::randint_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::randint_like(Tensor self, int high, *, MemoryFormat? memory_format=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, int64_t, c10::optional<MemoryFormat>), &TypeDefault::randint_like>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::randint_like.low(Tensor self, int low, int high, *, MemoryFormat? memory_format=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, int64_t, int64_t, c10::optional<MemoryFormat>), &TypeDefault::randint_like>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::randint_like.dtype(Tensor self, int high, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False, MemoryFormat? memory_format=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, int64_t, const TensorOptions &, c10::optional<MemoryFormat>), &TypeDefault::randint_like>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::randint_like.low_dtype(Tensor self, int low, int high, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False, MemoryFormat? memory_format=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, int64_t, int64_t, const TensorOptions &, c10::optional<MemoryFormat>), &TypeDefault::randint_like>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::randn(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (IntArrayRef, const TensorOptions &), &TypeDefault::randn>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::randn.generator(int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (IntArrayRef, Generator *, const TensorOptions &), &TypeDefault::randn>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::randn.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (IntArrayRef, c10::optional<DimnameList>, const TensorOptions &), &TypeDefault::randn>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::randn.generator_with_names(int[] size, *, Generator? generator, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (IntArrayRef, Generator *, c10::optional<DimnameList>, const TensorOptions &), &TypeDefault::randn>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::randn.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, IntArrayRef), &TypeDefault::randn_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::randn.generator_out(int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, IntArrayRef, Generator *), &TypeDefault::randn_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::randn_like(Tensor self, *, MemoryFormat? memory_format=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, c10::optional<MemoryFormat>), &TypeDefault::randn_like>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::randn_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False, MemoryFormat? memory_format=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const TensorOptions &, c10::optional<MemoryFormat>), &TypeDefault::randn_like>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::randperm(int n, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (int64_t, const TensorOptions &), &TypeDefault::randperm>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::randperm.generator(int n, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (int64_t, Generator *, const TensorOptions &), &TypeDefault::randperm>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::randperm.out(int n, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, int64_t), &TypeDefault::randperm_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::range.step(Scalar start, Scalar end, Scalar step=1, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (Scalar, Scalar, Scalar, const TensorOptions &), &TypeDefault::range>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::range(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (Scalar, Scalar, const TensorOptions &), &TypeDefault::range>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::reciprocal(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::reciprocal)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::reciprocal_(Tensor(a!) self) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &), &TypeDefault::reciprocal_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::reciprocal.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::reciprocal_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::neg(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::neg)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::neg_(Tensor(a!) self) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &), &TypeDefault::neg_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::repeat(Tensor self, int[] repeats) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef), &TypeDefault::repeat>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::repeat_interleave.self_Tensor(Tensor self, Tensor repeats, int? dim=None) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, c10::optional<int64_t>)>(&TypeDefault::repeat_interleave)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::repeat_interleave.self_int(Tensor self, int repeats, int? dim=None) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, int64_t, c10::optional<int64_t>)>(&TypeDefault::repeat_interleave)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::reshape(Tensor self, int[] shape) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef), &TypeDefault::reshape>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::reshape_as(Tensor self, Tensor other) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::reshape_as)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::round(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::round)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::round_(Tensor(a!) self) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &), &TypeDefault::round_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::rrelu(Tensor self, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Scalar, Scalar, bool, Generator *), &TypeDefault::rrelu>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::rrelu_(Tensor(a!) self, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, Scalar, Scalar, bool, Generator *), &TypeDefault::rrelu_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::hardshrink(Tensor self, Scalar lambd=0.5) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, Scalar)>(&TypeDefault::hardshrink)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::hardshrink_backward(Tensor grad_out, Tensor self, Scalar lambd) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, Scalar)>(&TypeDefault::hardshrink_backward)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::rsqrt(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::rsqrt)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::rsqrt_(Tensor(a!) self) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &), &TypeDefault::rsqrt_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::select.Dimname(Tensor(a) self, Dimname dim, int index) -> Tensor(a)")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Dimname, int64_t), &TypeDefault::select>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::select.int(Tensor(a) self, int dim, int index) -> Tensor(a)")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, int64_t, int64_t), &TypeDefault::select>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::selu(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::selu)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::selu_(Tensor(a!) self) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &), &TypeDefault::selu_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::celu(Tensor self, Scalar alpha=1.0) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, Scalar)>(&TypeDefault::celu)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::celu_(Tensor(a!) self, Scalar alpha=1.0) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, Scalar), &TypeDefault::celu_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::sigmoid_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::sin(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::sin)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::sin_(Tensor(a!) self) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &), &TypeDefault::sin_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::sinh(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::sinh)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::sinh_(Tensor(a!) self) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &), &TypeDefault::sinh_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::sinh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::sinh_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::detach(Tensor self) -> Tensor")
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::detach_(Tensor(a!) self) -> Tensor(a!)")
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::size.int(Tensor self, int dim) -> int")
    .catchAllKernel<int64_t (const Tensor &, int64_t)>(&TypeDefault::size)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::size.Dimname(Tensor self, Dimname dim) -> int")
    .impl_unboxedOnlyCatchAllKernel<int64_t (const Tensor &, Dimname), &TypeDefault::size>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::slice.Tensor(Tensor(a) self, int dim=0, int start=0, int end=9223372036854775807, int step=1) -> Tensor(a)")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, int64_t, int64_t, int64_t, int64_t), &TypeDefault::slice>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::slogdet(Tensor self) -> (Tensor sign, Tensor logabsdet)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &), &TypeDefault::slogdet>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::smm(Tensor self, Tensor mat2) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::smm)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::softmax.int(Tensor self, int dim, ScalarType? dtype=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, int64_t, c10::optional<ScalarType>), &TypeDefault::softmax>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Dimname, c10::optional<ScalarType>), &TypeDefault::softmax>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::split.Tensor(Tensor(a) self, int split_size, int dim=0) -> Tensor(a)[]")
    .impl_unboxedOnlyCatchAllKernel<std::vector<Tensor> (const Tensor &, int64_t, int64_t), &TypeDefault::split>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::split_with_sizes(Tensor self, int[] split_sizes, int dim=0) -> Tensor[]")
    .impl_unboxedOnlyCatchAllKernel<std::vector<Tensor> (const Tensor &, IntArrayRef, int64_t), &TypeDefault::split_with_sizes>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::squeeze(Tensor(a) self) -> Tensor(a)")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &), &TypeDefault::squeeze>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::squeeze.dim(Tensor(a) self, int dim) -> Tensor(a)")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, int64_t), &TypeDefault::squeeze>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::squeeze.dimname(Tensor(a) self, Dimname dim) -> Tensor(a)")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Dimname), &TypeDefault::squeeze>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::squeeze_(Tensor(a!) self) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &), &TypeDefault::squeeze_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::squeeze_.dim(Tensor(a!) self, int dim) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, int64_t), &TypeDefault::squeeze_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::squeeze_.dimname(Tensor(a!) self, Dimname dim) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, Dimname), &TypeDefault::squeeze_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::sspaddmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(&TypeDefault::sspaddmm)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::stack(Tensor[] tensors, int dim=0) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (TensorList, int64_t), &TypeDefault::stack>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::stack.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, TensorList, int64_t), &TypeDefault::stack_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::stft(Tensor self, int n_fft, int? hop_length=None, int? win_length=None, Tensor? window=None, bool normalized=False, bool onesided=True) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, int64_t, c10::optional<int64_t>, c10::optional<int64_t>, const Tensor &, bool, bool), &TypeDefault::stft>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::stride.int(Tensor self, int dim) -> int")
    .catchAllKernel<int64_t (const Tensor &, int64_t)>(&TypeDefault::stride)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::stride.Dimname(Tensor self, Dimname dim) -> int")
    .impl_unboxedOnlyCatchAllKernel<int64_t (const Tensor &, Dimname), &TypeDefault::stride>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::sum(Tensor self, *, ScalarType? dtype=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, c10::optional<ScalarType>), &TypeDefault::sum>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::sum.dim_IntList(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>), &TypeDefault::sum>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::sum.dim_DimnameList(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, DimnameList, bool, c10::optional<ScalarType>), &TypeDefault::sum>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::sum.IntList_out(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool, c10::optional<ScalarType>), &TypeDefault::sum_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::sum.DimnameList_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, DimnameList, bool, c10::optional<ScalarType>), &TypeDefault::sum_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::sum_to_size(Tensor self, int[] size) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef), &TypeDefault::sum_to_size>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::sqrt(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::sqrt)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::sqrt_(Tensor(a!) self) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &), &TypeDefault::sqrt_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::sqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::sqrt_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::square(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::square)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::square_(Tensor(a!) self) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &), &TypeDefault::square_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::std(Tensor self, bool unbiased=True) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, bool)>(&TypeDefault::std)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::std.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef, bool, bool), &TypeDefault::std>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::std_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, bool), &TypeDefault::std_mean>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::std_mean.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef, bool, bool), &TypeDefault::std_mean>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::std_mean.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, DimnameList, bool, bool), &TypeDefault::std_mean>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::std.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool, bool), &TypeDefault::std_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::std.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, DimnameList, bool, bool), &TypeDefault::std>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::std.names_out(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, DimnameList, bool, bool), &TypeDefault::std_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::prod(Tensor self, *, ScalarType? dtype=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, c10::optional<ScalarType>), &TypeDefault::prod>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::prod.dim_int(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, int64_t, bool, c10::optional<ScalarType>), &TypeDefault::prod>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::prod.int_out(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, int64_t, bool, c10::optional<ScalarType>), &TypeDefault::prod_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::prod.dim_Dimname(Tensor self, Dimname dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Dimname, bool, c10::optional<ScalarType>), &TypeDefault::prod>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::prod.Dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, Dimname, bool, c10::optional<ScalarType>), &TypeDefault::prod_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::t(Tensor(a) self) -> Tensor(a)")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &), &TypeDefault::t>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::t_(Tensor(a!) self) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &), &TypeDefault::t_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::tan(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::tan)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::tensordot(Tensor self, Tensor other, int[] dims_self, int[] dims_other) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, IntArrayRef, IntArrayRef), &TypeDefault::tensordot>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::transpose.int(Tensor(a) self, int dim0, int dim1) -> Tensor(a)")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, int64_t, int64_t), &TypeDefault::transpose>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::transpose.Dimname(Tensor(a) self, Dimname dim0, Dimname dim1) -> Tensor(a)")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Dimname, Dimname), &TypeDefault::transpose>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::transpose_(Tensor(a!) self, int dim0, int dim1) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, int64_t, int64_t), &TypeDefault::transpose_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::one_hot(Tensor self, int num_classes=-1) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, int64_t)>(&TypeDefault::one_hot)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::rot90(Tensor self, int k=1, int[] dims=[0,1]) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, int64_t, IntArrayRef), &TypeDefault::rot90>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::trapz.x(Tensor y, Tensor x, *, int dim=-1) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, int64_t)>(&TypeDefault::trapz)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::trapz.dx(Tensor y, *, float dx=1, int dim=-1) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, double, int64_t)>(&TypeDefault::trapz)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_trilinear(Tensor i1, Tensor i2, Tensor i3, int[] expand1, int[] expand2, int[] expand3, int[] sumdim, int unroll_dim=1) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef, IntArrayRef, int64_t), &TypeDefault::_trilinear>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::triplet_margin_loss(Tensor anchor, Tensor positive, Tensor negative, float margin=1.0, float p=2, float eps=1e-06, bool swap=False, int reduction=Mean) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, double, double, double, bool, int64_t)>(&TypeDefault::triplet_margin_loss)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::trunc(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::trunc)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::trunc_(Tensor(a!) self) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &), &TypeDefault::trunc_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::type_as(Tensor self, Tensor other) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::type_as)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_has_compatible_shallow_copy_type(Tensor self, Tensor from) -> bool")
    .catchAllKernel<bool (const Tensor &, const Tensor &)>(&TypeDefault::_has_compatible_shallow_copy_type)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_unsafe_view(Tensor self, int[] size) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef), &TypeDefault::_unsafe_view>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::unsqueeze(Tensor(a) self, int dim) -> Tensor(a)")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, int64_t), &TypeDefault::unsqueeze>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::unsqueeze_(Tensor(a!) self, int dim) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, int64_t), &TypeDefault::unsqueeze_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::var(Tensor self, bool unbiased=True) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, bool)>(&TypeDefault::var)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::var.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef, bool, bool), &TypeDefault::var>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::var.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool, bool), &TypeDefault::var_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::var.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, DimnameList, bool, bool), &TypeDefault::var>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::var.names_out(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, DimnameList, bool, bool), &TypeDefault::var_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::var_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, bool), &TypeDefault::var_mean>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::var_mean.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, IntArrayRef, bool, bool), &TypeDefault::var_mean>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::var_mean.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, DimnameList, bool, bool), &TypeDefault::var_mean>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::view_as(Tensor self, Tensor other) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::view_as)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::where.self(Tensor condition, Tensor self, Tensor other) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &)>(&TypeDefault::where)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::where(Tensor condition) -> Tensor[]")
    .impl_unboxedOnlyCatchAllKernel<std::vector<Tensor> (const Tensor &), &TypeDefault::where>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_s_where(Tensor condition, Tensor self, Tensor other) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &)>(&TypeDefault::_s_where)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::norm_except_dim(Tensor v, int pow=2, int dim=0) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, int64_t, int64_t), &TypeDefault::norm_except_dim>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_weight_norm(Tensor v, Tensor g, int dim=0) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, int64_t)>(&TypeDefault::_weight_norm)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_weight_norm_differentiable_backward(Tensor grad_w, Tensor saved_v, Tensor saved_g, Tensor saved_norms, int dim) -> (Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t), &TypeDefault::_weight_norm_differentiable_backward>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::zeros.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (IntArrayRef, c10::optional<DimnameList>, const TensorOptions &), &TypeDefault::zeros>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::zeros(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (IntArrayRef, const TensorOptions &), &TypeDefault::zeros>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::zeros.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, IntArrayRef), &TypeDefault::zeros_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::zeros_like(Tensor self, *, MemoryFormat? memory_format=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, c10::optional<MemoryFormat>), &TypeDefault::zeros_like>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::zeros_like.dtype(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False, MemoryFormat? memory_format=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const TensorOptions &, c10::optional<MemoryFormat>), &TypeDefault::zeros_like>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_sparse_sum(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::_sparse_sum)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_sparse_sum.dtype(Tensor self, *, ScalarType dtype) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, ScalarType), &TypeDefault::_sparse_sum>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_sparse_sum.dim(Tensor self, int[1] dim) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef), &TypeDefault::_sparse_sum>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_sparse_sum.dim_dtype(Tensor self, int[1] dim, *, ScalarType dtype) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef, ScalarType), &TypeDefault::_sparse_sum>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::norm.ScalarOpt_dtype(Tensor self, Scalar? p, *, ScalarType dtype) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, c10::optional<Scalar>, ScalarType), &TypeDefault::norm>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::norm.Scalar(Tensor self, Scalar p=2) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, Scalar)>(&TypeDefault::norm)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::norm.ScalarOpt_dim_dtype(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, c10::optional<Scalar>, IntArrayRef, bool, ScalarType), &TypeDefault::norm>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::norm.ScalarOpt_dim(Tensor self, Scalar? p, int[1] dim, bool keepdim=False) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, c10::optional<Scalar>, IntArrayRef, bool), &TypeDefault::norm>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::norm.dtype_out(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, c10::optional<Scalar>, IntArrayRef, bool, ScalarType), &TypeDefault::norm_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::norm.out(Tensor self, Scalar? p, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, c10::optional<Scalar>, IntArrayRef, bool), &TypeDefault::norm_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::norm.names_ScalarOpt_dim_dtype(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim, *, ScalarType dtype) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, c10::optional<Scalar>, DimnameList, bool, ScalarType), &TypeDefault::norm>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::norm.names_ScalarOpt_dim(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim=False) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, c10::optional<Scalar>, DimnameList, bool), &TypeDefault::norm>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::norm.names_dtype_out(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim, *, ScalarType dtype, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, c10::optional<Scalar>, DimnameList, bool, ScalarType), &TypeDefault::norm_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::norm.names_out(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, c10::optional<Scalar>, DimnameList, bool), &TypeDefault::norm_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::frobenius_norm(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::frobenius_norm)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::frobenius_norm.dim(Tensor self, int[1] dim, bool keepdim=False) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef, bool), &TypeDefault::frobenius_norm>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::frobenius_norm.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool), &TypeDefault::frobenius_norm_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::nuclear_norm(Tensor self, bool keepdim=False) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, bool)>(&TypeDefault::nuclear_norm)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::nuclear_norm.out(Tensor self, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, bool), &TypeDefault::nuclear_norm_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::nuclear_norm.dim(Tensor self, int[2] dim, bool keepdim=False) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef, bool), &TypeDefault::nuclear_norm>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::nuclear_norm.dim_out(Tensor self, int[2] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, IntArrayRef, bool), &TypeDefault::nuclear_norm_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::resize_as_(Tensor(a!) self, Tensor the_template, *, MemoryFormat? memory_format=None) -> Tensor(a!)")
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::sub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, Scalar, Scalar)>(&TypeDefault::sub)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::sub_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, Scalar, Scalar), &TypeDefault::sub_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::rsub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, Scalar)>(&TypeDefault::rsub)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::rsub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, Scalar, Scalar)>(&TypeDefault::rsub)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_sparse_addmm(Tensor self, Tensor sparse, Tensor dense, *, Scalar beta=1, Scalar alpha=1) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar)>(&TypeDefault::_sparse_addmm)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::sparse_coo_tensor.size(int[] size, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (IntArrayRef, const TensorOptions &), &TypeDefault::sparse_coo_tensor>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::sparse_coo_tensor.indices(Tensor indices, Tensor values, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const TensorOptions &), &TypeDefault::sparse_coo_tensor>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::sparse_coo_tensor.indices_size(Tensor indices, Tensor values, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, IntArrayRef, const TensorOptions &), &TypeDefault::sparse_coo_tensor>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_sparse_coo_tensor_unsafe(Tensor indices, Tensor values, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, IntArrayRef, const TensorOptions &), &TypeDefault::_sparse_coo_tensor_unsafe>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::to_dense_backward(Tensor grad, Tensor input) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::to_dense_backward)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::unbind.int(Tensor(a) self, int dim=0) -> Tensor(a)[]")
    .impl_unboxedOnlyCatchAllKernel<std::vector<Tensor> (const Tensor &, int64_t), &TypeDefault::unbind>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::unbind.Dimname(Tensor(a) self, Dimname dim) -> Tensor(a)[]")
    .impl_unboxedOnlyCatchAllKernel<std::vector<Tensor> (const Tensor &, Dimname), &TypeDefault::unbind>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::to_mkldnn_backward(Tensor grad, Tensor input) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::to_mkldnn_backward)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::to.dtype_layout(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False, bool non_blocking=False, bool copy=False, MemoryFormat? memory_format=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const TensorOptions &, bool, bool, c10::optional<MemoryFormat>), &TypeDefault::to>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::to.device(Tensor self, Device device, ScalarType dtype, bool non_blocking=False, bool copy=False, MemoryFormat? memory_format=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Device, ScalarType, bool, bool, c10::optional<MemoryFormat>), &TypeDefault::to>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::to.dtype(Tensor self, ScalarType dtype, bool non_blocking=False, bool copy=False, MemoryFormat? memory_format=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, ScalarType, bool, bool, c10::optional<MemoryFormat>), &TypeDefault::to>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::to.other(Tensor self, Tensor other, bool non_blocking=False, bool copy=False, MemoryFormat? memory_format=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, bool, bool, c10::optional<MemoryFormat>), &TypeDefault::to>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::meshgrid(Tensor[] tensors) -> Tensor[]")
    .impl_unboxedOnlyCatchAllKernel<std::vector<Tensor> (TensorList), &TypeDefault::meshgrid>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cartesian_prod(Tensor[] tensors) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (TensorList), &TypeDefault::cartesian_prod>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::combinations(Tensor self, int r=2, bool with_replacement=False) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, int64_t, bool)>(&TypeDefault::combinations)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::item(Tensor self) -> Scalar")
    .catchAllKernel<Scalar (const Tensor &)>(&TypeDefault::item)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::result_type.Tensor(Tensor tensor, Tensor other) -> ScalarType")
    .impl_unboxedOnlyCatchAllKernel<ScalarType (const Tensor &, const Tensor &), &TypeDefault::result_type>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::result_type.Scalar(Tensor tensor, Scalar other) -> ScalarType")
    .impl_unboxedOnlyCatchAllKernel<ScalarType (const Tensor &, Scalar), &TypeDefault::result_type>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::result_type.Scalar_Tensor(Scalar scalar, Tensor tensor) -> ScalarType")
    .impl_unboxedOnlyCatchAllKernel<ScalarType (Scalar, const Tensor &), &TypeDefault::result_type>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::result_type.Scalar_Scalar(Scalar scalar1, Scalar scalar2) -> ScalarType")
    .impl_unboxedOnlyCatchAllKernel<ScalarType (Scalar, Scalar), &TypeDefault::result_type>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::can_cast(ScalarType from, ScalarType to) -> bool")
    .impl_unboxedOnlyCatchAllKernel<bool (ScalarType, ScalarType), &TypeDefault::can_cast>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::promote_types(ScalarType type1, ScalarType type2) -> ScalarType")
    .impl_unboxedOnlyCatchAllKernel<ScalarType (ScalarType, ScalarType), &TypeDefault::promote_types>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_thnn_differentiable_lstm_cell_backward(Tensor? grad_hy, Tensor? grad_cy, Tensor input_gates, Tensor hidden_gates, Tensor? input_bias, Tensor? hidden_bias, Tensor cx, Tensor cy) -> (Tensor, Tensor, Tensor, Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &), &TypeDefault::_thnn_differentiable_lstm_cell_backward>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_thnn_differentiable_gru_cell_backward(Tensor grad_hy, Tensor input_gates, Tensor hidden_gates, Tensor hx, Tensor? input_bias, Tensor? hidden_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &), &TypeDefault::_thnn_differentiable_gru_cell_backward>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::lstm.input(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, TensorList, TensorList, bool, int64_t, double, bool, bool, bool), &TypeDefault::lstm>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::lstm.data(Tensor data, Tensor batch_sizes, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, TensorList, TensorList, bool, int64_t, double, bool, bool), &TypeDefault::lstm>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::gru.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool, bool), &TypeDefault::gru>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::gru.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool), &TypeDefault::gru>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::rnn_tanh.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool, bool), &TypeDefault::rnn_tanh>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::rnn_tanh.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool), &TypeDefault::rnn_tanh>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::rnn_relu.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool, bool), &TypeDefault::rnn_relu>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::rnn_relu.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool), &TypeDefault::rnn_relu>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> (Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, TensorList, const Tensor &, const Tensor &, const Tensor &, const Tensor &), &TypeDefault::lstm_cell>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &), &TypeDefault::gru_cell>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &), &TypeDefault::rnn_tanh_cell>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &), &TypeDefault::rnn_relu_cell>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::quantized_lstm(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first, *, ScalarType? dtype=None, bool use_dynamic=False) -> (Tensor, Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, TensorList, TensorList, bool, int64_t, double, bool, bool, bool, c10::optional<ScalarType>, bool), &TypeDefault::quantized_lstm>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::quantized_lstm.data(Tensor data, Tensor batch_sizes, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, *, ScalarType? dtype=None, bool use_dynamic=False) -> (Tensor, Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, const Tensor &, TensorList, TensorList, bool, int64_t, double, bool, bool, c10::optional<ScalarType>, bool), &TypeDefault::quantized_lstm>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::quantized_gru.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool, bool), &TypeDefault::quantized_gru>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::quantized_gru.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, const Tensor &, TensorList, bool, int64_t, double, bool, bool), &TypeDefault::quantized_gru>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::quantized_lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> (Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, TensorList, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Scalar, Scalar), &TypeDefault::quantized_lstm_cell>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::quantized_gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Scalar, Scalar)>(&TypeDefault::quantized_gru_cell)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::quantized_rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Scalar, Scalar)>(&TypeDefault::quantized_rnn_relu_cell)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::quantized_rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, Scalar, Scalar)>(&TypeDefault::quantized_rnn_tanh_cell)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_pack_padded_sequence(Tensor input, Tensor lengths, bool batch_first) -> (Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, bool), &TypeDefault::_pack_padded_sequence>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_pack_padded_sequence_backward(Tensor grad, int[] input_size, Tensor batch_sizes, bool batch_first) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef, const Tensor &, bool), &TypeDefault::_pack_padded_sequence_backward>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_pad_packed_sequence(Tensor data, Tensor batch_sizes, bool batch_first, Scalar padding_value, int total_length) -> (Tensor, Tensor)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, bool, Scalar, int64_t), &TypeDefault::_pad_packed_sequence>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::masked_fill.Scalar(Tensor self, Tensor mask, Scalar value) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, Scalar)>(&TypeDefault::masked_fill)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::masked_fill.Tensor(Tensor self, Tensor mask, Tensor value) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &)>(&TypeDefault::masked_fill)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::masked_scatter(Tensor self, Tensor mask, Tensor source) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &)>(&TypeDefault::masked_scatter)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::index_add(Tensor self, int dim, Tensor index, Tensor source) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, int64_t, const Tensor &, const Tensor &)>(&TypeDefault::index_add)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::index_add.dimname(Tensor self, Dimname dim, Tensor index, Tensor source) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Dimname, const Tensor &, const Tensor &), &TypeDefault::index_add>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::index_fill.int_Scalar(Tensor self, int dim, Tensor index, Scalar value) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, int64_t, const Tensor &, Scalar)>(&TypeDefault::index_fill)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::index_fill.int_Tensor(Tensor self, int dim, Tensor index, Tensor value) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, int64_t, const Tensor &, const Tensor &)>(&TypeDefault::index_fill)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::index_fill_.Dimname_Scalar(Tensor(a!) self, Dimname dim, Tensor index, Scalar value) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, Dimname, const Tensor &, Scalar), &TypeDefault::index_fill_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::index_fill_.Dimname_Tensor(Tensor(a!) self, Dimname dim, Tensor index, Tensor value) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, Dimname, const Tensor &, const Tensor &), &TypeDefault::index_fill_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::index_fill.Dimname_Scalar(Tensor self, Dimname dim, Tensor index, Scalar value) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Dimname, const Tensor &, Scalar), &TypeDefault::index_fill>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::index_fill.Dimname_Tensor(Tensor self, Dimname dim, Tensor index, Tensor value) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Dimname, const Tensor &, const Tensor &), &TypeDefault::index_fill>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::scatter.src(Tensor self, int dim, Tensor index, Tensor src) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, int64_t, const Tensor &, const Tensor &)>(&TypeDefault::scatter)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::scatter.value(Tensor self, int dim, Tensor index, Scalar value) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, int64_t, const Tensor &, Scalar)>(&TypeDefault::scatter)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::scatter.dimname_src(Tensor self, Dimname dim, Tensor index, Tensor src) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Dimname, const Tensor &, const Tensor &), &TypeDefault::scatter>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::scatter.dimname_value(Tensor self, Dimname dim, Tensor index, Scalar value) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Dimname, const Tensor &, Scalar), &TypeDefault::scatter>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::scatter_add(Tensor self, int dim, Tensor index, Tensor src) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, int64_t, const Tensor &, const Tensor &)>(&TypeDefault::scatter_add)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::scatter_add.dimname(Tensor self, Dimname dim, Tensor index, Tensor src) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Dimname, const Tensor &, const Tensor &), &TypeDefault::scatter_add>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::lt_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, Scalar), &TypeDefault::lt_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::lt_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::lt_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::gt_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, Scalar), &TypeDefault::gt_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::gt_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::gt_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::le_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, Scalar), &TypeDefault::le_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::le_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::le_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::ge_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, Scalar), &TypeDefault::ge_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::ge_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::ge_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::eq_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, Scalar), &TypeDefault::eq_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::eq_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::eq_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::ne_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, Scalar), &TypeDefault::ne_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::ne_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::ne_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::bitwise_and.Scalar(Tensor self, Scalar other) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Scalar), &TypeDefault::bitwise_and>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::bitwise_and.Tensor(Tensor self, Tensor other) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &), &TypeDefault::bitwise_and>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::bitwise_and_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, Scalar), &TypeDefault::bitwise_and_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::bitwise_and_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::bitwise_and_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::__and__.Scalar(Tensor self, Scalar other) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, Scalar)>(&TypeDefault::__and__)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::__and__.Tensor(Tensor self, Tensor other) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::__and__)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::__iand__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, Scalar), &TypeDefault::__iand__>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::__iand__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::__iand__>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::bitwise_or.Scalar(Tensor self, Scalar other) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Scalar), &TypeDefault::bitwise_or>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::bitwise_or.Tensor(Tensor self, Tensor other) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &), &TypeDefault::bitwise_or>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::bitwise_or_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, Scalar), &TypeDefault::bitwise_or_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::bitwise_or_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::bitwise_or_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::__or__.Scalar(Tensor self, Scalar other) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, Scalar)>(&TypeDefault::__or__)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::__or__.Tensor(Tensor self, Tensor other) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::__or__)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::__ior__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, Scalar), &TypeDefault::__ior__>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::__ior__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::__ior__>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::bitwise_xor.Scalar(Tensor self, Scalar other) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Scalar), &TypeDefault::bitwise_xor>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::bitwise_xor.Tensor(Tensor self, Tensor other) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &), &TypeDefault::bitwise_xor>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::bitwise_xor_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, Scalar), &TypeDefault::bitwise_xor_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::bitwise_xor_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::bitwise_xor_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::__xor__.Scalar(Tensor self, Scalar other) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, Scalar)>(&TypeDefault::__xor__)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::__xor__.Tensor(Tensor self, Tensor other) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::__xor__)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::__ixor__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, Scalar), &TypeDefault::__ixor__>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::__ixor__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::__ixor__>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::atan2_(Tensor(a!) self, Tensor other) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::atan2_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::digamma_(Tensor(a!) self) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &), &TypeDefault::digamma_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::polygamma_(Tensor(a!) self, int n) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, int64_t), &TypeDefault::polygamma_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::addcdiv_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar), &TypeDefault::addcdiv_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cauchy_(Tensor(a!) self, float median=0, float sigma=1, *, Generator? generator=None) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, double, double, Generator *), &TypeDefault::cauchy_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::log_normal_(Tensor(a!) self, float mean=1, float std=2, *, Generator? generator=None) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, double, double, Generator *), &TypeDefault::log_normal_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::exponential_(Tensor(a!) self, float lambd=1, *, Generator? generator=None) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, double, Generator *), &TypeDefault::exponential_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::geometric_(Tensor(a!) self, float p, *, Generator? generator=None) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, double, Generator *), &TypeDefault::geometric_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cross.out(Tensor self, Tensor other, int? dim=None, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, c10::optional<int64_t>), &TypeDefault::cross_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cross(Tensor self, Tensor other, int? dim=None) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, c10::optional<int64_t>)>(&TypeDefault::cross)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::triu(Tensor self, int diagonal=0) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, int64_t)>(&TypeDefault::triu)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::tril(Tensor self, int diagonal=0) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, int64_t)>(&TypeDefault::tril)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::index_select.dimname_out(Tensor self, Dimname dim, Tensor index, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, Dimname, const Tensor &), &TypeDefault::index_select_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::index_select.dimname(Tensor self, Dimname dim, Tensor index) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Dimname, const Tensor &), &TypeDefault::index_select>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::nonzero_numpy(Tensor self) -> Tensor[]")
    .impl_unboxedOnlyCatchAllKernel<std::vector<Tensor> (const Tensor &), &TypeDefault::nonzero_numpy>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::gather.dimname_out(Tensor self, Dimname dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, Dimname, const Tensor &, bool), &TypeDefault::gather_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::gather.dimname(Tensor self, Dimname dim, Tensor index, *, bool sparse_grad=False) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Dimname, const Tensor &, bool), &TypeDefault::gather>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::_gather_sparse_backward(Tensor self, int dim, Tensor index, Tensor grad) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, int64_t, const Tensor &, const Tensor &)>(&TypeDefault::_gather_sparse_backward)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::addcmul.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar), &TypeDefault::addcmul_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::addcmul(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar)>(&TypeDefault::addcmul)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::addcmul_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, Scalar), &TypeDefault::addcmul_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::addcdiv.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, Scalar), &TypeDefault::addcdiv_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::addcdiv(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar)>(&TypeDefault::addcdiv)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::triangular_solve.X(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False, *, Tensor(a!) X, Tensor(b!) M) -> (Tensor(a!) solution, Tensor(b!) cloned_coefficient)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, const Tensor &, bool, bool, bool), &TypeDefault::triangular_solve_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::triangular_solve(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False) -> (Tensor solution, Tensor cloned_coefficient)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &, bool, bool, bool), &TypeDefault::triangular_solve>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::symeig.e(Tensor self, bool eigenvectors=False, bool upper=True, *, Tensor(a!) e, Tensor(b!) V) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, bool, bool), &TypeDefault::symeig_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::symeig(Tensor self, bool eigenvectors=False, bool upper=True) -> (Tensor eigenvalues, Tensor eigenvectors)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, bool, bool), &TypeDefault::symeig>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::svd.U(Tensor self, bool some=True, bool compute_uv=True, *, Tensor(a!) U, Tensor(b!) S, Tensor(c!) V) -> (Tensor(a!) U, Tensor(b!) S, Tensor(c!) V)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor &,Tensor &,Tensor &> (Tensor &, Tensor &, Tensor &, const Tensor &, bool, bool), &TypeDefault::svd_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::svd(Tensor self, bool some=True, bool compute_uv=True) -> (Tensor U, Tensor S, Tensor V)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor,Tensor> (const Tensor &, bool, bool), &TypeDefault::svd>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cholesky.out(Tensor self, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, bool), &TypeDefault::cholesky_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cholesky(Tensor self, bool upper=False) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, bool)>(&TypeDefault::cholesky)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cholesky_solve.out(Tensor self, Tensor input2, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, bool), &TypeDefault::cholesky_solve_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::cholesky_solve(Tensor self, Tensor input2, bool upper=False) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, bool)>(&TypeDefault::cholesky_solve)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::solve(Tensor self, Tensor A) -> (Tensor solution, Tensor LU)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, const Tensor &), &TypeDefault::solve>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::solve.solution(Tensor self, Tensor A, *, Tensor(a!) solution, Tensor(b!) lu) -> (Tensor(a!) solution, Tensor(b!) LU)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, const Tensor &), &TypeDefault::solve_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::qr.Q(Tensor self, bool some=True, *, Tensor(a!) Q, Tensor(b!) R) -> (Tensor(a!) Q, Tensor(b!) R)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, bool), &TypeDefault::qr_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::qr(Tensor self, bool some=True) -> (Tensor Q, Tensor R)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, bool), &TypeDefault::qr>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::lu_solve.out(Tensor self, Tensor LU_data, Tensor LU_pivots, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &), &TypeDefault::lu_solve_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::lu_solve(Tensor self, Tensor LU_data, Tensor LU_pivots) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &)>(&TypeDefault::lu_solve)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::digamma.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::digamma_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::digamma(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::digamma)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::polygamma.out(int n, Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, int64_t, const Tensor &), &TypeDefault::polygamma_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::polygamma(int n, Tensor self) -> Tensor")
    .catchAllKernel<Tensor (int64_t, const Tensor &)>(&TypeDefault::polygamma)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::sign(Tensor self) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &), &TypeDefault::sign>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::sign_(Tensor(a!) self) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &), &TypeDefault::sign_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::dist(Tensor self, Tensor other, Scalar p=2) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, Scalar)>(&TypeDefault::dist)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::atan2.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &), &TypeDefault::atan2_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::atan2(Tensor self, Tensor other) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::atan2)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::min.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &), &TypeDefault::min_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::min.other(Tensor self, Tensor other) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::min)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::max.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &), &TypeDefault::max_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::max.other(Tensor self, Tensor other) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::max)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::sort.dimname_values(Tensor self, Dimname dim, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor &,Tensor &> (Tensor &, Tensor &, const Tensor &, Dimname, bool), &TypeDefault::sort_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::sort.dimname(Tensor self, Dimname dim, bool descending=False) -> (Tensor values, Tensor indices)")
    .impl_unboxedOnlyCatchAllKernel<std::tuple<Tensor,Tensor> (const Tensor &, Dimname, bool), &TypeDefault::sort>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::argsort(Tensor self, int dim=-1, bool descending=False) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, int64_t, bool)>(&TypeDefault::argsort)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::argsort.dimname(Tensor self, Dimname dim, bool descending=False) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, Dimname, bool), &TypeDefault::argsort>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::all(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::all)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::normal.float_float(float mean, float std, int[] size, *, Generator? generator=None, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (double, double, IntArrayRef, Generator *, const TensorOptions &), &TypeDefault::normal>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::normal.float_float_out(float mean, float std, int[] size, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, double, double, IntArrayRef, Generator *), &TypeDefault::normal_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::alias(Tensor(a) self) -> Tensor(a)")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &), &TypeDefault::alias>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::mse_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, int64_t), &TypeDefault::mse_loss_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::mse_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, int64_t)>(&TypeDefault::mse_loss)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::l1_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, int64_t), &TypeDefault::l1_loss_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::l1_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, int64_t)>(&TypeDefault::l1_loss)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t)>(&TypeDefault::l1_loss_backward)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::multilabel_margin_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, int64_t), &TypeDefault::multilabel_margin_loss_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::multilabel_margin_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, int64_t)>(&TypeDefault::multilabel_margin_loss)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::nll_loss.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t), &TypeDefault::nll_loss_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::nll_loss(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t), &TypeDefault::nll_loss>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::nll_loss2d.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t), &TypeDefault::nll_loss2d_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::nll_loss2d(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t, int64_t), &TypeDefault::nll_loss2d>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::smooth_l1_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, int64_t)>(&TypeDefault::smooth_l1_loss)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::smooth_l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t)>(&TypeDefault::smooth_l1_loss_backward)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::soft_margin_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, int64_t), &TypeDefault::soft_margin_loss_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::soft_margin_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, int64_t)>(&TypeDefault::soft_margin_loss)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::soft_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, const Tensor &, int64_t), &TypeDefault::soft_margin_loss_backward_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::soft_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, int64_t)>(&TypeDefault::soft_margin_loss_backward)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::elu.out(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, Scalar, Scalar, Scalar), &TypeDefault::elu_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::elu(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, Scalar, Scalar, Scalar)>(&TypeDefault::elu)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::elu_backward(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, Tensor output) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, Scalar, Scalar, Scalar, const Tensor &)>(&TypeDefault::elu_backward)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::elu_(Tensor(a!) self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, Scalar, Scalar, Scalar), &TypeDefault::elu_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::hardtanh.out(Tensor self, Scalar min_val=-1, Scalar max_val=1, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, Scalar, Scalar), &TypeDefault::hardtanh_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::hardtanh(Tensor self, Scalar min_val=-1, Scalar max_val=1) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, Scalar, Scalar)>(&TypeDefault::hardtanh)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::hardtanh_backward(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, Scalar, Scalar)>(&TypeDefault::hardtanh_backward)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::hardtanh_(Tensor(a!) self, Scalar min_val=-1, Scalar max_val=1) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, Scalar, Scalar), &TypeDefault::hardtanh_>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::leaky_relu_backward(Tensor grad_output, Tensor self, Scalar negative_slope) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, Scalar)>(&TypeDefault::leaky_relu_backward)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::log_sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &), &TypeDefault::log_sigmoid_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::log_sigmoid(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::log_sigmoid)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::rrelu_with_noise_backward(Tensor grad_output, Tensor self, Tensor noise, Scalar lower, Scalar upper, bool training) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, const Tensor &, Scalar, Scalar, bool)>(&TypeDefault::rrelu_with_noise_backward)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::softplus.out(Tensor self, Scalar beta=1, Scalar threshold=20, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, Scalar, Scalar), &TypeDefault::softplus_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::softplus(Tensor self, Scalar beta=1, Scalar threshold=20) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, Scalar, Scalar)>(&TypeDefault::softplus)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::softplus_backward(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold, Tensor output) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, Scalar, Scalar, const Tensor &)>(&TypeDefault::softplus_backward)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::softshrink.out(Tensor self, Scalar lambd=0.5, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, Scalar), &TypeDefault::softshrink_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::softshrink(Tensor self, Scalar lambd=0.5) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, Scalar)>(&TypeDefault::softshrink)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::softshrink_backward(Tensor grad_output, Tensor self, Scalar lambd) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &, Scalar)>(&TypeDefault::softshrink_backward)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, IntArrayRef), &TypeDefault::adaptive_avg_pool2d>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::sigmoid_backward(Tensor grad_output, Tensor output) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::sigmoid_backward)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::tanh_backward(Tensor grad_output, Tensor output) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &, const Tensor &)>(&TypeDefault::tanh_backward)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::thnn_conv2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef), &TypeDefault::thnn_conv2d_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::thnn_conv2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef), &TypeDefault::thnn_conv2d>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::thnn_conv_depthwise2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef), &TypeDefault::thnn_conv_depthwise2d_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::thnn_conv_depthwise2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef, IntArrayRef), &TypeDefault::thnn_conv_depthwise2d>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::slow_conv3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, *, Tensor(a!) out) -> Tensor(a!)")
    .impl_unboxedOnlyCatchAllKernel<Tensor & (Tensor &, const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef), &TypeDefault::slow_conv3d_out>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::slow_conv3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0) -> Tensor")
    .impl_unboxedOnlyCatchAllKernel<Tensor (const Tensor &, const Tensor &, IntArrayRef, const Tensor &, IntArrayRef, IntArrayRef), &TypeDefault::slow_conv3d>()
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::isfinite(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::isfinite)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA))
  .op(torch::RegisterOperators::options()
    .schema("aten::isinf(Tensor self) -> Tensor")
    .catchAllKernel<Tensor (const Tensor &)>(&TypeDefault::isinf)
    .aliasAnalysis(c10::AliasAnalysisKind::FROM_SCHEMA));
}
#endif

}  // namespace at
